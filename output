alpha_mpi.c:	double pi = 3.141592653589793;
alpha_mpi.c:	double time1, time2, time3, time4, time5, duration;
alphaout_mpi.c:	double pi = 3.141592653589793;
alphaout_mpi.c:	double time1, time2, time3, time4, time5, duration;
basis_functions.c:	double x,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
basis_functions.c:		x5 = x*x4;
basis_functions.c:		x6 = x*x5;
basis_functions.c:		x15 = x*x14;
basis_functions.c:		x16 = x*x15;
basis_functions.c:		c[5] = 5*x-20*x3+16*x5;
basis_functions.c:		c[7] = -7*x+56*x3-112*x5+64*x7;
basis_functions.c:		c[8] = 1-32*x2+160*x4-256*x6+128*x8;
basis_functions.c:		c[9] = 9*x-120*x3+432*x5-576*x7+256*x9;
basis_functions.c:		c[10] = -1+50*x2-400*x4+1120*x6-1280*x8+512*x10;
basis_functions.c:		c[11] = -11*x+220*x3-1232*x5+2816*x7-2816*x9+1024*x11;
basis_functions.c:		c[12] = 1-72*x2+840*x4-3584*x6+6912*x8-6144*x10+2048*x12;
basis_functions.c:		c[13] = 13*x-364*x3+2912*x5-9984*x7+16640*x9-13312*x11+4096*x13;
basis_functions.c:		c[14] = -1+98*x2-1568*x4+9408*x6-26880*x8+39424*x10-28672*x12+8192*x14;
basis_functions.c:		c[15] = -15*x+560*x3-6048*x5+28800*x7-70400*x9+92160*x11-61440*x13+16384*x15;
basis_functions.c:		c[16] = 1-128*x2+2688*x4-21504*x6+84480*x8-180224*x10+212992*x12-131072*x14+32768*x16;
basis_functions.c:		c[17] = 17*x-816*x3+11424*x5-71808*x7+239360*x9-452608*x11+487424*x13-278528*x15+65536*x17;
basis_functions.c:		c[18] = -1+162*x2-4320*x4+44352*x6-228096*x8+658944*x10-1118208*x12+1105920*x14-589824*x16+131072*x18;
basis_functions.c:		c[19] = -19*x+1140*x3-20064*x5+160512*x7-695552*x9+1770496*x11-2723840*x13+2490368*x15-1245184*x17+262144*x19;
basis_functions.c:		c[20] = 1-200*x2+6600*x4-84480*x6+549120*x8-2050048*x10+4659200*x12-6553600*x14+5570560*x16-2621440*x18+524288*x20;
basis_functions.c:		c[0] = 1.4142135623730951e0;
basis_functions.c:		c[1] = -3.3756997551928847e0 + 5.786913866044945e0*x;
basis_functions.c:		c[2] = 5.857942858741853e0 + x*(-26.035301594408235e0 + 23.323291011657375e0*x);
basis_functions.c:		c[3] = -8.760915686242807e0 + x*(71.7022408238121e0 + x*(-153.03341432582195e0 + 93.8265808978262e0*x));
basis_functions.c:		c[4] = 12.028869326922228e0 + x*(-155.51537366984735e0 + x*(577.0215230700893e0 + x*(-806.1871647803015e0 + 376.89108318348246e0*x)));
basis_functions.c:		c[5] = -15.624746853974106e0 + x*(291.78801084032733e0 + x*(-1640.448712057485e0 + x*(3855.2703674671116e0 + x*(-3998.5641880855546e0 + 1512.2674806805558e0*x))));
basis_functions.c:		c[6] = 19.521039399362802e0 + x*(-496.2652936891399e0 + x*(3904.8084193896348e0 + x*(-13554.144186145362e0 + x*(23152.592991565212e0 + x*(-19084.77664932902e0 + 6063.361254515526e0*x)))));
basis_functions.c:		c[7] = -23.696178665886563e0 + x*(786.0043552180601e0 + x*(-8212.886442321847e0 + x*(39090.96390622662e0 + x*(-96946.1193040041e0 + x*(129703.52749463338e0 + x*(-88690.39511926284e0 + 24298.077504038214e0*x))))));
basis_functions.c:		c[8] = 28.132661070977356e0 + x*(-1179.2803681258697e0 + x*(15759.126092314222e0 + x*(-97951.8652250972e0 + x*(328381.62961941794e0 + x*(-630074.9018354649e0 + x*(691847.6543531556e0 + x*(-404139.85797590186e0 + 97335.19289056562e0*x)))))));
basis_functions.c:		c[9] = -32.815914875298006e0 + x*(1695.5104145912178e0 + x*(-28165.01608942845e0 + x*(220772.39882273442e0 + x*(-954926.7209672539e0 + x*(2.4509675147002432e6 + x*(-3.8242639841623474e6 + x*(3.5581525259069176e6 + x*(-1.8140011867991858e6 + 389807.93794077844e0*x))))))));
basis_functions.c:		c[10] = 37.73356425593564e0 + x*(-2355.190084049372e0 + x*(47559.188364765716e0 + x*(-457923.7746878821e0 + x*(2.472163562069992e6 + x*(-8.112584812618965e6 + x*(1.6797118825865906e7 + x*(-2.2049354548288405e7 + x*(1.7790131817380115e7 + x*(-8.0455729348687e6 + 1.5607866136050052e6*x)))))))));
basis_functions.c:		c[11] = -42.874927926449175e0 + x*(3179.8395792820847e0 + x*(-76661.96440176916e0 + x*(888159.3176358037e0 + x*(-5.837107933507063e6 + x*(2.371855932406927e7 + x*(-6.234552921656418e7 + x*(1.0791386794500947e8 + x*(-1.2214124862299423e8 + x*(8.69684197886849e7 + x*(-3.5339988899822265e7 + 6.248400079218326e6*x))))))))));
basis_functions.c:		c[12] = 48.23066450981983e0 + x*(-4191.957165552317e0 + x*(118874.1278501085e0 + x*(-1.629664606559826e6 + x*(1.2786105719726719e7 + x*(-6.2806798504052125e7 + x*(2.0314351404528514e8 + x*(-4.438705823764211e8 + x*(6.59058144364488e8 + x*(-6.552342351104976e8 + x*(4.174162373268366e8 + x*(-1.5398902570976862e8 + 2.5011581520396564e7*x)))))))))));
basis_functions.c:		c[13] = -53.792513796803796e0 + x*(5414.9784340589795e0 + x*(-178369.73143294628e0 + x*(2.8538719386436893e6 + x*(-2.6311919489937577e7 + x*(1.5333655016527754e8 + x*(-5.961815777501817e8 + x*(1.5947757474399505e9 + x*(-2.9753330660720387e9 + x*(3.8641242863216815e9 + x*(-3.423810815315122e9 + x*(1.9730785022004287e9 + x*(-6.664671195908492e8 + 1.0010855604589409e8*x))))))))))));
basis_functions.c:		c[14] = 59.55310296734622e0 + x*(-6873.240262722061e0 + x*(260192.7701475644e0 + x*(-4.802416148754513e6 + x*(5.135577866295446e7 + x*(-3.4973175397161955e8 + x*(1.605075402477227e9 + x*(-5.137516452095756e9 + x*(1.168500922762126e10 + x*(-1.899486422792956e10 + x*(2.190753642832183e10 + x*(-1.7502010704964283e10 + x*(9.206939738829182e9 + x*(-2.8678960735294027e9 + 4.006516812595085e8*x)))))))))))));
basis_functions.c:		c[15] = -65.50579820834473e0 + x*(8591.948636237023e0 + x*(-370357.5721281478e0 + x*(7.807624520808943e6 + x*(-9.578284987299001e7 + x*(7.527659265940506e8 + x*(-4.018687493368187e9 + x*(1.512000398288557e10 + x*(-4.0991780033226265e10 + x*(8.094840326851529e10 + x*(-1.1647665962444365e11 + x*(1.2075855311492816e11 + x*(-8.781813586492548e10 + x*(4.249014289430518e10 + x*(-1.2279642177752201e10 + 1.6033730708428237e9*x))))))))))))));
basis_functions.c:		c[16] = 71.64458890856112e0 + x*(-10597.149682661788e0 + x*(515952.77445228305e0 + x*(-1.2316948630706692e7 + x*(1.7172385295392188e8 + x*(-1.541214541225732e9 + x*(9.455947035969555e9 + x*(-4.122655174310344e10 + x*(1.3091930057699596e11 + x*(-3.071656502955633e11 + x*(5.3530313970009045e11 + x*(-6.90457487621122e11 + x*(6.499141512188698e11 + x*(-4.336527461943265e11 + x*(1.9422561655265048e11 + x*(-5.235063027479724e10 + 6.416213262093232e9*x)))))))))))))));
basis_functions.c:		c[17] = -77.96399577436695e0 + x*(12915.703424265868e0 + x*(-705248.7644358044e0 + x*(1.8921760524090685e7 + x*(-2.9738146341586107e8 + x*(3.020674538917135e9 + x*(-2.108402978018295e10 + x*(1.0527413058650687e11 + x*(-3.861420014319176e11 + x*(1.058023856173923e12 + x*(-2.1845904253954023e12 + x*(3.403897905497536e12 + x*(-3.9765021992211123e12 + x*(3.4265342889957705e12 + x*(-2.1119220554553318e12 + x*(8.804246384012518e11 + x*(-2.2233020942692874e11 + 2.5674578639253654e10*x))))))))))))))));
basis_functions.c:		c[18] = 84.4589968649861e0 + x*(-15575.259843698894e0 + x*(947808.4781531439e0 + x* (-2.8390949710596293e7 + x*(4.994177632003586e8 + x*(-5.696821309117249e9 + x*(4.484603032845677e10 + x*(-2.5392151642600656e11 + x*(1.0634656966966683e12 + x*(-3.356333388156241e12 + x*(8.072277885459159e12 + x*(-1.486624830129744e13 + x*(2.0932158767547742e13 + x*(-2.233845388340292e13 + x*(1.774511220788228e13 + x*(-1.0161017258710043e13 + x*(3.9616350752113623e12 + x*(-9.410297373911746e11 + 1.0273328444470764e11*x)))))))))))))))));
basis_functions.c:		c[19] = -91.12496728940697e0 + x*(18604.236944056156e0 + x*(-1.254601457468168e6 + x*(4.170977109485834e7 + x*(-8.160583847105858e8 + x*(1.0382712123854874e10 + x*(-9.149243980943028e10 + x*(5.825179740299591e11 + x*(-2.7589211007519106e12 + x*(9.916541455121814e12 + x*(-2.740559644999032e13 + x*(5.8657397773021625e13 + x*(-9.74129701508348e13 + x*(1.2504942041334317e14 + x*(-1.2279505815037888e14 + x*(9.046418398330978e13 + x*(-4.836541895951392e13 + x*(1.770967729512595e13 + x*(-3.9709483237301836e12 + 4.110595536440684e11*x))))))))))))))))));
basis_functions.c:		c[20] = 97.95762948199966e0 + x*(-22031.80054059359e0 + x*(1.638121075083121e6 + x*(-6.012440720213786e7 + x*(1.3010701936859317e9 + x*(-1.8352629621380344e10 + x*(1.798475287217923e11 + x*(-1.2782438783848992e12 + x*(6.790103638217227e12 + x*(-2.7533490713162695e13 + x*(8.64658002100802e13 + x*(-2.1220772992802438e14 + x*(4.0876513076505756e14 + x*(-6.177471899342902e14 + x*(7.284042874200015e14 + x*(-6.622481589521924e14 + x*(4.548143161085369e14 + x*(-2.2802598939179403e14 + x*(7.870481945411689e13 + x*(-1.6711089688994598e13 + 1.644697429767943e12*x)))))))))))))))))));
basis_functions.c:		c[21] = -104.95301178384831e0 +  x*(25887.845567714343e0 +  x*(-2.112504844254644e6 +  x*(8.519272092641205e7 +  x*(-2.0287924278732634e9 +  x*(3.155847484292104e10 +  x*(-3.4192871748543353e11 +  x*(2.6956515203558486e12 +  x*(-1.5946755599694477e13 +  x*(7.236312237452686e13 +  x*(-2.5583034244373403e14 +  x*(7.120584397447604e14 +  x*(-1.569836448011825e15 +  x*(2.746937002747979e15 +  x*(-3.8068279216908415e15 +  x*(4.1494784836662e15 +  x*(-3.511676790545259e15 +  x*(2.2584368985873095e15 +  x*(-1.0659039813068108e15 +  x*(3.4793796383478275e14 +  x*(-7.015347217556637e13 +  6.580465226897099e12*x))))))))))))))))))));
basis_functions.c:		c[22] = 112.10741362670048e0 +  x*(-30202.97872089562e0 +  x*(2.693657736075008e6 +  x*(-1.1884168756015076e8 +  x*(3.100426202601953e9 +  x*(-5.292895939260643e10 +  x*(6.307883221273923e11 +  x*(-5.485150687817607e12 +  x*(3.591251583370249e13 +  x*(-1.8110343218757778e14 +  x*(7.15099219757024e14 +  x*(-2.2365383010707918e15 +  x*(5.582161538306907e15 +  x*(-1.1161057086785934e16 +  x*(1.788126900948703e16 +  x*(-2.2873789431917596e16 +  x*(2.3175583715583148e16 +  x*(-1.834221198726953e16 +  x*(1.1090552628881716e16 +  x*(-4.944295552026795e15 +  x*(1.5308435653418522e15 +  x*(-2.938500937416968e14 +  2.632799888555057e13*x)))))))))))))))))))));
basis_functions.c:		c[23] = -119.41737602478639e0 +  x*(35008.502281901674e0 +  x*(-3.3993784327222323e6 +  x*(1.6343200708316493e8 +  x*(-4.651814261891972e9 +  x*(8.677691111687524e10 +  x*(-1.1322797252948088e12 +  x*(1.0805909013207701e13 +  x*(-7.787307935581552e13 +  x*(4.337740546693942e14 +  x*(-1.899921533650162e15 +  x*(6.625105370930605e15 +  x*(-1.855023381291182e16 +  x*(4.192395011674142e16 +  x*(-7.663407374634805e16 +  x*(1.13169918228466e17 +  x*(-1.3438607122640626e17 +  x*(1.2717335847324734e17 +  x*(-9.451498577596197e16 +  x*(5.391915051345755e16 +  x*(-2.2775052649405536e16 +  x*(6.70620892016711e15 +  x*(-1.228344332343782e15 +  1.0533456425167152e14*x))))))))))))))))))))));
basis_functions.c:		c[24] = 126.87965637720605e0 +  x*(-40336.398998698365e0 +  x*(4.249488449962997e6 +  x*(-2.2183040961522388e8 +  x*(6.86297184394459e9 +  x*(-1.3934600582988275e11 +  x*(1.982384392910251e12 +  x*(-2.0670386605261e13 +  x*(1.6316452823852084e14 +  x*(-9.985480629334418e14 +  x*(4.822588500879264e15 +  x*(-1.862324437339406e16 +  x*(5.804742821790563e16 +  x*(-1.4695544606886925e17 +  x*(3.032126647451085e17 +  x*(-5.102058784563754e17 +  x*(6.98535383183716e17 +  x*(-7.73815544793023e17 +  x*(6.868526406124819e17 +  x*(-4.8109667336772704e17 +  x*(2.5976720451833834e17 +  x*(-1.0424523530050837e17 +  x*(2.9262045442986884e16 +  x*(-5.125150145878397e15 +  4.2142152192149194e14*x)))))))))))))))))))))));
basis_functions.c:		c[25] = -134.491206803488e0 +  x*(46219.31791023019e0 +  x*(-5.265964066542147e6 +  x*(2.974901785934205e8 +  x*(-9.96966059093989e9 +  x*(2.195352857310363e11 +  x*(-3.3922963336126206e12 +  x*(3.849004139340477e13 +  x*(-3.313434759057121e14 +  x*(2.217266765431108e15 +  x*(-1.174581245312703e16 +  x*(4.99370121022288e16 +  x*(-1.721189749668801e17 +  x*(4.843905629980304e17 +  x*(-1.1180741295808937e18 +  x*(2.1209090265438848e18 +  x*(-3.30469535339528e18 +  x*(4.2160115315338163e18 +  x*(-4.3758182094006574e18 +  x*(3.656747103229585e18 +  x*(-2.4218001730193306e18 +  x*(1.2411643201845583e18 +  x*(-4.743869524886739e17 +  x*(1.2722050483770163e17 +  x*(-2.134768126598756e16 +  1.685994248543993e15*x))))))))))))))))))))))));
basis_functions.c:		c[26] = 142.24915539972176e0 +  x*(-52690.56102159368e0 +  x*(6.473071001989615e6 +  x*(-3.945404276381906e8 +  x*(1.4277330612056498e10 +  x*(-3.3984804829045514e11 +  x*(5.684174899692816e12 +  x*(-6.9922874069321836e13 +  x*(6.53867406791417e14 +  x*(-4.763983293935045e15 +  x*(2.7552310767264252e16 +  x*(-1.2829598013897742e17 +  x*(4.861584278364979e17 +  x*(-1.5109415297504054e18 +  x*(3.8720336015615514e18 +  x*(-8.206956209220083e18 +  x*(1.439949561632082e19 +  x*(-2.08837778574581e19 +  x*(2.493640789693672e19 +  x*(-2.4342580286213657e19 +  x*(1.921591182098272e19 +  x*(-1.2068264048354036e19 +  x*(5.885522028504295e18 +  x*(-2.147322467641481e18 +  x*(5.512652460315715e17 +  x*(-8.877901041840107e16 +  6.745120798846301e15*x)))))))))))))))))))))))));
basis_functions.c:		c[27] = -150.1507899276979e0 +  x*(59784.07074785415e0 +  x*(-7.897501787882967e6 +  x*(5.178846782372931e8 +  x*(-2.0177791151575954e10 +  x*(5.176212210631405e11 +  x*(-9.341378293572648e12 +  x*(1.2416629622798588e14 +  x*(-1.256784042762689e15 +  x*(9.931367172423528e15 +  x*(-6.2445410322447544e16 +  x*(3.1701032780315584e17 +  x*(-1.3139504391924193e18 +  x*(4.483948066124729e18 +  x*(-1.2674593839080387e19 +  x*(2.9791804656756478e19 +  x*(-5.834172324329286e19 +  x*(9.51795254114605e19 +  x*(-1.2907025022014838e20 +  x*(1.4481414222937219e20 +  x*(-1.3341493127659667e20 +  x*(9.978320833533803e19 +  x*(-5.9583214482525274e19 +  x*(2.771537346688831e19 +  x*(-9.67237880120554e18 +  x*(2.3813696229586673e18 +  x*(-3.686690504487581e17 +  2.6984740109611484e16*x))))))))))))))))))))))))));
basis_functions.c:		c[28] = 158.19354354543802e0 +  x*(-67534.41805534769e0 +  x*(9.568515780774033e6 +  x*(-6.733092963191792e8 +  x*(2.8169007865917152e10 +  x*(-7.766023203881554e11 +  x*(1.5078117069590576e13 +  x*(-2.1589692015926312e14 +  x*(2.357614427073073e15 +  x*(-2.01359115552026e16 +  x*(1.371281772725806e17 +  x*(-7.558391841803506e17 +  x*(3.4111971991096914e18 +  x*(-1.2717714866901774e19 +  x*(3.942741123778835e19 +  x*(-1.0211027552110826e20 +  x*(2.2152310237261585e20 +  x*(-4.029652227167279e20 +  x*(6.140984869959893e20 +  x*(-7.817775773657346e20 +  x*(8.270800053054181e20 +  x*(-7.213293079799531e20 +  x*(5.125279326775661e20 +  x*(-2.9167714401584772e20 +  x*(1.296802980370281e20 +  x*(-4.337138352319186e19 +  x*(1.0257815956707385e19 +  x*(-1.5288877640067674e18 +  1.0795484318532685e17*x)))))))))))))))))))))))))));
basis_functions.c:		c[29] = -166.37498226189356e0 +  x*(75976.79123820314e0 +  x*(-1.151808176786489e7 +  x*(8.676023565189033e8 +  x*(-3.887846451864386e10 +  x*(1.148953676381704e12 +  x*(-2.3934863432678824e13 +  x*(3.6813680644128344e14 +  x*(-4.3242087449884085e15 +  x*(3.978977552151675e16 +  x*(-2.924852374995899e17 +  x*(1.7439149875850511e18 +  x*(-8.535188642152932e18 +  x*(3.4609223933351727e19 +  x*(-1.170924133710945e20 +  x*(3.322489588926877e20 +  x*(-7.933945134639314e20 +  x*(1.5973157297628187e21 +  x*(-2.71174334549901e21 +  x*(3.876152484487006e21 +  x*(-4.649004365589361e21 +  x*(4.6522772621726355e21 +  x*(-3.851631994314492e21 +  x*(2.6062859615443553e21 +  x*(-1.4166698775058435e21 +  x*(6.031915918702388e20 +  x*(-1.9366526332567598e20 +  x*(4.406902525990608e19 +  x*(-6.332395611824858e18 +  4.3187877065047546e17*x))))))))))))))))))))))))))));
basis_functions.c:		c[30] = 174.69279385684402e0 +  x*(-85146.9852753318e0 +  x*(1.3781023119138444e7 +  x*(-1.1086835134727354e9 +  x*(5.309056900423028e10 +  x*(-1.6777779532584512e12 +  x*(3.740756879558627e13 +  x*(-6.16429070702494e14 +  x*(7.767069253224284e15 +  x*(-7.677516434679163e16 +  x*(6.072604279712954e17 +  x*(-3.9035041108409994e18 +  x*(2.064269417455473e19 +  x*(-9.067408008814892e19 +  x*(3.3330750419330256e20 +  x*(-1.0310881319322431e21 +  x*(2.695078720548752e21 +  x*(-5.966952847380881e21 +  x*(1.1201680174207667e22 +  x*(-1.7822050554518392e22 +  x*(2.3981316160378754e22 +  x*(-2.7185420295043864e22 +  x*(2.580537293928862e22 +  x*(-2.033152547164499e22 +  x*(1.313129740016507e22 +  x*(-6.830911377205165e21 +  x*(2.7903072376676103e21 +  x*(-8.614058163478663e20 +  x*(1.8886079284421345e20 +  x*(-2.6196954585144746e19 +  1.7277377034025516e18*x)))))))))))))))))))))))))))));
basis_functions.c:		c[0]= 1.0954451150103321;
basis_functions.c:		c[1]= -2.1092468156535116 + 3.9797109729311537 * x;
basis_functions.c:		c[2]= 2.9041712904469814 + x * (-15.78084861214725 + 15.307509740161855 * x);
basis_functions.c:		c[3]= -3.5330619593144394 +  x * (38.2652227170407 + x * (-92.03652254161825 + 60.18822212863831 * x));
basis_functions.c:		c[4]= 4.063188721968487 +  x * (-73.81128958584378 +  x * (318.3575371215102 +  x * (-483.9094730069234 + 238.57424618743443 * x)));
basis_functions.c:		c[5]= -4.530151220454275 +  x * (124.46361945405005 +  x * (-833.9843739390842 +  x * (2167.7296922221 +  x * (-2399.048591930191 + 948.9922744642721 * x))));
basis_functions.c:		c[6]= 4.952648040982252 +  x * (-192.0148192203936 +  x * (1838.1792685290932 +  x * (-7156.27906500475 +  x * (13177.686913004514 +  x * (-11450.257995896067 + 3781.6730056157453 * x)))));
basis_functions.c:		c[7]= -5.341569754053899 +  x * (278.07437972419206 +  x * (-3596.7643248185395 +  x * (19433.568553261615 +  x * (-52424.186128313886 +  x * (74450.95306389645 +  x * (-53217.53936068194 + 15085.469038616082 * x))))));
basis_functions.c:		c[8]= 5.703914129549628 +  x * (-384.11605257520404 +  x * (6448.443819397964 +  x * (-45978.6936804424 +  x * (169007.00692336692 +  x * (-346382.9437029205 +  x * (399607.48962281115 +  x * (-242535.62875307043 +  60217.246142591546 * x)))))));
basis_functions.c:		c[9]= -6.044514396738054 +  x * (511.5085483440659 +  x * (-10810.60577380327 +  x * (98111.07192343063 +  x * (-468609.60562402516 +  x * (1.292038826422126E+6 +  x * (-2.127904457488157E+6 +  x * (2.0649962359645301E+6 +  x * (-1.088800924070769E+6 +  240478.76162556157 * x))))))));
basis_functions.c:		c[10]= 6.366884970330424 +  x * (-661.5359917156579 +  x * (17184.712346849603 +  x * (-193148.25398305935 +  x * (1.1588172753916509E+6 +  x * (-4.10606573774027E+6 +  x * (9.011702214285111E+6 +  x * (-1.2382277457115991E+7 +  x * (1.036361166841728E+7 +  x * (-4.829823976158711E+6 + 960659.736106961 * x)))))))));
basis_functions.c:		c[11]= -6.673680287475873 +  x * (835.4122929270187 +  x * (-26161.356666741853 +  x * (356397.71073388465 +  x * (-2.6180997154320376E+6 +  x * (1.1540942916800536E+7 + x * (-3.2281568716930676E+7 +  x * (5.867961197931242E+7 +  x * (-6.909101960106197E+7 +  x * (5.081829152200098E+7 +  x * (-2.121773084218945E+7 + 3.83851261122056E+6 * x))))))))));
basis_functions.c:		c[12]= 6.9669650136271715 +  x * (-1034.291747962584 +  x * (38425.042580458925 +  x * (-623502.6771799055 +  x * (5.496625138324125E+6 +  x * (-2.941664626126138E+7 +  x * (1.016121571654123E+8 +  x * (-2.3387595104609007E+8 +  x * (3.621956770243941E+8 +  x * (-3.72827105722147E+8 +  x * (2.4452561729736152E+8 +  x * (-9.246450836482546E+7 + 1.5340245198571851E+7 * x)))))))))));
basis_functions.c:		c[13]= -7.248383335641797 +  x * (1259.2771583086403 +  x * (-54758.729365137624 +  x * (1.0431610373471837E+6 +  x * (-1.0858252434969563E+7 +  x * (6.921420383119743E+7 +  x * (-2.8835518442289156E+8 +  x * (8.148344791941224E+8 +  x * (-1.5895102369091074E+9 +  x * (2.1419183885645294E+9 +  x * (-1.9576151006434064E+9 +  x * (1.1582998044599066E+9 +  x * (-4.002318588257535E+8 + 6.131410853511387E+7 * x))))))))))));
basis_functions.c:		c[14]= 7.519270207923492 +  x * (-1511.4262320922037 +  x * (76048.17357831409 +  x * (-1.6802353016722894E+6 +  x * (2.0374534264656954E+7 +  x * (-1.5231963917063665E+8 +  x * (7.513729360337021E+8 +  x * (-2.5473307600225654E+9 +  x * (6.071836439897458E+9 +  x * (-1.0261941454276749E+10 +  x * (1.2230079752289885E+10 +  x * (-1.0047876942071486E+10 +  x * (5.414736558032607E+9 +  x * (-1.7224210231245065E+9 + 2.4509529507547927E+8 * x)))))))))))));
basis_functions.c:		c[15]= -7.780727282648146 +  x * (1791.756745005158 +  x * (-103286.09334619982 +  x * (2.61927092300828E+6 +  x * (-3.658312220743106E+7 +  x * (3.16692314979927E+8 +  x * (-1.8224164508591602E+9 +  x * (7.280548707010085E+9 +  x * (-2.0730418101732273E+10 +  x * (4.2643235819853096E+10 +  x * (-6.351237406357205E+10 +  x * (6.781796523969145E+10 +  x * (-5.059141810628969E+10 +  x * (2.5028081454537613E+10 +  x * (-7.375652708560732E+9 + 9.798212544365072E+8 * x))))))))))))));
basis_functions.c:		c[16] = 8.033676375935949 + x * (-2101.250777572948 + x * (137576.17544732132 + x * (-3.9684394921772266E+6 + x * (6.3224592098642536E+7 + x * (-6.269886455974891E+8 + x * (4.1576725583219132E+9 + x * (-1.929213363170445E+10 + x * (6.447491377257601E+10 + x * (-1.578601954900697E+11 + x * (2.852161430539527E+11 + x * (-3.7943999179885065E+11 + x * (3.668517675618791E+11 + x * (-2.5057222625438974E+11 + x * (1.145607919726525E+11 + x * (-3.144646597840021E+10 + 3.9173212503521247E+9 * x)))))))))))))));
basis_functions.c:		c[17] = -8.278898115038553 + x * (2440.858247018174 + x * (-180136.94188648675 + x * (5.863922729620333E+6 + x * (-1.0567340055216531E+8 + x * (1.1894850346137857E+9 + x * (-8.995900506184052E+9 + x * (4.7909143615317924E+10 + x * (-1.852941492964068E+11 + x * (5.307170754330357E+11 + x * (-1.1378188711228562E+12 + x * (1.831073435112492E+12 + x * (-2.1998643154396694E+12 + x * (1.9426447861470872E+12 + x * (-1.2234865028420896E+12 + x * (5.199246785198902E+11 + x * (-1.3356121895163435E+11 + 1.5662341485063662E+10 * x))))))))))))))));
basis_functions.c:		c[18] = 8.517060506564533 + x * (-2811.49988914541 + x * (232305.4898663858 + x * (-8.474752631626084E+6 + x * (1.7148043998197603E+8 + x * (-2.173519468375892E+9 + x * (1.8582741383923553E+10 + x * (-1.1245601875484656E+11 + x * (4.975219085708405E+11 + x * (-1.6440227726861147E+12 + x * (4.111521464468269E+12 + x * (-7.83069232221174E+12 + x * (1.1352489528235783E+13 + x * (-1.2429124151112918E+13 + x * (1.009893300260734E+13 + x * (-5.899996833073857E+12 + x * (2.3419751708724287E+12 + x * (-5.653460720823069E+11 + 6.262463806837346E+10 * x)))))))))))))))));
basis_functions.c:		c[19] = -8.748740468206007 + x * (3214.0698038834144 + x * (-295541.11689490196 + x * (1.2008122626782844E+7 + x * (-2.7104647692825216E+8 + x * (3.841616464810799E+9 + x * (-3.6846811583480064E+10 + x * (2.5122448154143253E+11 + x * (-1.2590481292072463E+12 + x * (4.745504388339901E+12 + x * (-1.3655976138987129E+13 + x * (3.0264854858725234E+13 + x * (-5.180852288402946E+13 + x * (6.830045028041166E+13 + x * (-6.866595137250121E+13 + x * (5.165723163861862E+13 + x * (-2.814033185410684E+13 + x * (1.0479207635698943E+13 + x * (-2.3857883035233457E+12 +2.5040992483504608E+11 * x))))))))))))))))));
basis_functions.c:		c[20] = 8.97444033546309 + x * (-3649.4376494133103 + x * (371428.8410470481 + x * (-1.6715184142086634E+7 + x * (4.184476351805153E+8 + x * (-6.590982291722055E+9 + x * (7.044786310491571E+10 + x * (-5.371660664991962E+11 + x * (3.0243165461762275E+12 + x * (-1.2878432252171045E+13 + x * (4.216737985055649E+13 + x * (-1.0728556674386886E+14 + x * (2.1325131341859994E+14 + x * (-3.312949696742948E+14 + x * (4.0030267601021575E+14 + x * (-3.7195690594776825E+14 + x * (2.6048334933495872E+14 + x * (-1.3291166823356114E+14 + x * (4.661086116044422E+13 + x * (-1.004076661019918E+13 + 1.001320226365571E+12 * x)))))))))))))))))));
basis_functions.c:		c[21] = -9.194600707816766 + x * (4118.450549559457 + x * (-461682.8250167036 + x * (2.2897342561708387E+7 + x * (-6.324360192489773E+8 + x * (1.1009664017486628E+10 + x * (-1.3036269381797885E+11 + x * (1.1044942583864387E+12 + x * (-6.935812088020383E+12 + x * (3.309741480737209E+13 + x * (-1.2215241922467323E+14 + x * (3.528630557696331E+14 + x * (-8.035853921942139E+14 + x * (1.446851355868624E+15 + x * (-2.056498840738573E+15 + x * (2.2927842497078465E+15 + x * (-1.9800699808505708E+15 + x * (1.2968979296760465E+15 + x * (-6.223014774816636E+14 + x * (2.0621477290296528E+14 + x * (-4.215351074715364E+13 + 4.0041233600522153E+12 * x))))))))))))))))))));
basis_functions.c:		c[22] = 9.40961058097594 + x * (-4621.934764507434 + x * (568149.7114646474 + x * (-3.0913066179292038E+7 + x * (9.376405635070086E+8 + x * (-1.7951364756800285E+10 + x * (2.3423304218934393E+11 + x * (-2.192531360385382E+12 + x * (1.5260334240722863E+13 + x * (-8.103431038365986E+13 + x * (3.344258598457536E+14 + x * (-1.0867301599965315E+15 + x * (2.804565022203017E+15 + x * (-5.775121201717693E+15 + x * (9.49746751135612E+15 + x * (-1.243620682987342E+16 + x * (1.2867314978113284E+16 + x * (-1.037838327691611E+16 + x * (6.383884965663635E+15 + x * (-2.890829252203022E+15 + x * (9.079252100931582E+14 + x * (-1.7657578772658012E+14 +1.6012279693253242E+13 * x)))))))))))))))))))));
basis_functions.c:		c[23] = -9.619815435187508 + x * (5160.6971641630325 + x * (-692811.8762379455 + x * (4.1185221392333455E+7 + x * (-1.3659952362900376E+9 + x * (2.863370636398831E+10 + x * (-4.097741938002342E+11 + x * (4.216179117942528E+12 + x * (-3.2345260000395953E+13 + x * (1.8995752269710234E+14 + x * (-8.705924316268609E+14 + x * (3.1574400506867855E+15 + x * (-9.150031418516634E+15 + x * (2.1316098767255956E+16 + x * (-4.0028678416158824E+16 + x * (6.055423472091037E+16 + x * (-7.348109183194715E+16 + x * (7.091164980692716E+16 + x * (-5.3645884132395064E+16 + x * (3.1103425034790184E+16 + x * (-1.3333788302451488E+16 + x * (3.9798884777461965E+15 + x * (-7.381500155023539E+14 + 6.4033714452186195E+13 * x))))))))))))))))))))));
basis_functions.c:		c[24] = 9.825523762334964 + x * (-5735.526535420326 + x * (837790.6052591096 + x * (-5.4208947060981296E+7 + x * (1.9584238249854705E+9 + x * (-4.47656379618319E+10 + x * (6.9963665119582E+11 + x * (-7.876629374922554E+12 + x * (6.627638524132341E+13 + x * (-4.281465022485856E+14 + x * (2.1660246907864468E+15 + x * (-8.70831482261239E+15 + x * (2.811831516160032E+16 + x * (-7.343945860190504E+16 + x * (1.5578734200712874E+17 + x * (-2.6872425844605786E+17 + x * (3.762251679916688E+17 + x * (-4.252724319985521E+17 + x * (3.84467714478598E+17 + x * (-2.7383820207494784E+17 + x * (1.5013989922575235E+17 + x * (-6.110479577093965E+16 + x * (1.7375996920769186E+16 + x * (-3.07998711587955E+15 + 2.5607832491255266E+14 * x)))))))))))))))))))))));
basis_functions.c:		c[25] = -10.02701238525011 + x * (6347.194748493368 + x * (-1.0053492002298848E+6 + x * (7.05600806504207E+7 + x * (-2.7668126763846908E+9 + x * (6.871071244089586E+10 + x * (-1.168229596441694E+12 + x * (1.4331735648246725E+13 + x * (-1.3167972824873848E+14 + x * (9.31207261467822E+14 + x * (-5.172786427242632E+15 + x * (2.2917880985902548E+16 + x * (-8.190102258035544E+16 + x * (2.3798255982835254E+17 + x * (-5.6517918603277946E+17 + x * (1.099805109955323E+18 + x * (-1.753491354434178E+18 + x * (2.2840513747708012E+18 + x * (-2.415874010469953E+18 + x * (2.0540177667773312E+18 + x * (-1.3820140193269553E+18 + x * (7.186419566896742E+17 + x * (-2.7837616555077373E+17 + x * (7.558452891570296E+16 + x * (-1.2829495241523878E+16 + 1.0241050879417446E+15 * x))))))))))))))))))))))));
basis_functions.c:		c[26] = 10.22453083177677 + x * (-6996.45780275739 + x * (1.1978960177399607E+6 + x * (-9.090414849325387E+7 + x * (3.8563049650839047E+9 + x * (-1.036941019944505E+11 + x * (1.9111580950652532E+12 + x * (-2.545330338434257E+13 + x * (2.5434807890318203E+14 + x * (-1.9605267865551322E+15 + x * (1.190167435599617E+16 + x * (-5.7805845035932696E+16 + x * (2.273064142194111E+17 + x * (-7.299764638892594E+17 + x * (1.92610485555693E+18 + x * (-4.1907551526032026E+18 + x * (7.528478202257305E+18 + x * (-1.1154602076860023E+19 + x * (1.3580843994350481E+19 + x * (-1.3495092034786386E+19 + x * (1.0827887525120467E+19 + x * (-6.902922347537394E+18 + x * (3.413298003824651E+18 + x * (-1.2613557714157207E+18 + x * (3.2767935518283955E+17 + x * (-5.335616294799632E+16 +4.0956509882831815E+15 * x)))))))))))))))))))))))));
basis_functions.c:		c[27] = -10.418304961201025 + x * (7684.056768873867 + x * (-1.41798744589678E+6 + x * (1.1600593224377547E+8 + x * (-5.307952310389011E+9 + x * (1.5406250663934464E+11 + x * (-3.0681006385446514E+12 + x * (4.420899794254907E+13 + x * (-4.787203976276435E+14 + x * (4.0063572236508945E+15 + x * (-2.6467035390235164E+16 + x * (1.4027151594889157E+17 + x * (-6.038136388839872E+17 + x * (2.1307770204926093E+18 + x * (-6.20574101094947E+18 + x * (1.4983290342438707E+19 + x * (-3.0060888422722687E+19 + x * (5.012985825961944E+19 + x * (-6.935163277800357E+19 + x * (7.924529879019127E+19 + x * (-7.424089539199579E+19 + x * (5.6388769553645404E+19 + x * (-3.4153895501732655E+19 + x * (1.6097496670770786E+19 + x * (-5.686958360897066E+18 + x * (1.4161586697502344E+18 + x * (-2.215773613374757E+17 +1.6379752463138342E+16 * x))))))))))))))))))))))))));
basis_functions.c:		c[28] = 10.60853999359725 + x * (-8410.718641079426 + x * (1.6683308221845126E+6 + x * (-1.4673962334787348E+8 + x * (7.221761857946858E+9 + x * (-2.2560753548180804E+11 + x * (4.840164822778592E+12 + x * (-7.522031272936064E+13 + x * (8.797401330531595E+14 + x * (-7.965422797551383E+15 + x * (5.7046415371359256E+16 + x * (-3.2854153569117523E+17 + x * (1.5411155459951327E+18 + x * (-5.945734368974502E+18 + x * (1.900504971585692E+19 + x * (-5.0589813811898884E+19 + x * (1.125068240524756E+20 + x * (-2.093126568217102E+20 + x * (3.255865307126723E+20 + x * (-4.223310353952164E+20 + x * (4.545593680831961E+20 + x * (-4.027716030971748E+20 + x * (2.904018544574523E+20 + x * (-1.6752183161037898E+20 + x * (7.54239413110126E+19 + x * (-2.552265037941522E+19 + x * (6.102704813469026E+18 + x * (-9.189202174179542E+17 +6.550841172001531E+16 * x)))))))))))))))))))))))))));
basis_functions.c:		c[29] = -10.795423058058251 + x * (9177.157111213304 + x * (-1.9517872959067556E+6 + x * (1.8409957711884564E+8 + x * (-9.720179285202456E+9 + x * (3.2596471837926044E+11 + x * (-7.51301240533026E+12 + x * (1.2556592909476053E+14 + x * (-1.5813220550303612E+15 + x * (1.5440443851735448E+16 + x * (-1.1946498593328032E+17 + x * (7.448610305180494E+17 + x * (-3.7919086294392924E+18 + x * (1.5922387096168344E+19 + x * (-5.5577843979807646E+19 + x * (1.621894769948826E+20 + x * (-3.972468554999087E+20 + x * (8.183905050482618E+20 + x * (-1.4188457581670829E+21 + x * (2.0674368711435577E+21 + x * (-2.5238078562892555E+21 + x * (2.566994352406931E+21 + x * (-2.1574044226294354E+21 + x * (1.4803272182136308E+21 + x * (-8.151241810074396E+20 + x * (3.512716335874708E+20 + x * (-1.140571825171433E+20 + x * (2.622832025810071E+19 + x * (-3.8061237193176806E+18 + 2.619941541007736E+17 * x))))))))))))))))))))))))))));
basis_functions.c:		c[30] = 10.979125350054215 + x * (-9984.073274205144 + x * (2.2713746382595506E+6 + x * (-2.2921167778930542E+8 + x * (1.2952050578838844E+10 + x * (-4.6510204497286145E+11 + x * (1.1487346975269096E+13 + x * (-2.0592284707313097E+14 + x * (2.7846377755118665E+15 + x * (-2.923538504195309E+16 + x * (2.4360203888667866E+17 + x * (-1.6387577481544146E+18 + x * (9.020630909028758E+18 + x * (-4.105994433121373E+19 + x * (1.5581519987427525E+20 + x * (-4.960225161813954E+20 + x * (1.330539188979366E+21 + x * (-3.0159968819945113E+21 + x * (5.784798771121869E+21 + x * (-9.386533679304147E+21 + x * (1.2860916237570195E+22 + x * (-1.4824292176268154E+22 + x * (1.4290321528010943E+22 + x * (-1.1421112151281846E+22 + x * (7.47506680504976E+21 + x * (-3.936958044406528E+21 + x * (1.6268678500302187E+21 + x * (-5.076947467283502E+20 + x * (1.1244416661311868E+20 + x * (-1.5746265411724675E+19 + 1.0478290935056824E+18 * x)))))))))))))))))))))))))))));
basis_optimisation_mpi.c:	double time1, time2, time3, time4, time5, duration;
basis_optimisation_mpi.c:// 	char suffix1[5],suffix2[5],suffix3[5];
basis_optimisation_mpi.c:	char suffix1[5],suffix2[5],suffix3[5],suffix4[5];
basis_optimisation_tri_mpi.c:	double time1, time2, time3, time4, time5, duration;
basis_optimisation_tri_mpi.c:	char suffix1[5],suffix2[5],suffix3[5];
bispectrum_mpi.c:5. read in Bessel and transfer data from file
bispectrum_mpi.c:	double pi = 3.141592653589793;
bispectrum_mpi.c:	double time1, time2, time3, time4, time5, duration;
bispectrum_mpi.c:	int nmax = 50;
bispectrum_mpi.c:					ltriples[n][5] = k;
bispectrum_mpi.c:			ltriples[k][5] = k;
bispectrum_mpi.c:			ltriples[k][5] = k;
bispectrum_mpi.c:				ltriples[n][5] = n3;
bispectrum_mpi.c:		ltriples[0][1] = 250;
bispectrum_mpi.c:		ltriples[0][2] = 250;
bispectrum_mpi.c:		ltriples[0][4] = 5;
bispectrum_mpi.c:		ltriples[0][5] = 5;
bispectrum_mpi.c:		int l4,l5,l6;
bispectrum_mpi.c:				l5 = (int)completed[j][1];
bispectrum_mpi.c:				if( l4==l1 && l5==l2 && l6==l3 ){
bispectrum_mpi.c:						results[2] = ltriples[i][5];
bispectrum_mpi.c:					results[2] = ltriples[i][5];
bispectrum_mpi.c:		results[2] = (double)ltriples[lnext][5];
bispectrum_mpi.c:			k = ltriples[n][5];
bispectrum_mpi.c:			factor = (648.0/3.1415927)*(z1*z2*z3)/(z1+z2+z3);
calculate_area.c:	double h5;
calculate_area.c:					h5 = array[cell_list[m].i-2*step2][cell_list[m].j+step2];
calculate_area.c:					h5 = array[cell_list[m].i+2*step2][cell_list[m].j-step2];
calculate_area.c:					h5 = 0;
calculate_area.c:			area2 = (h2 + h3 + h5) / (3 * initial_grid_size * initial_grid_size * pow(4,level+1));
calculate_area.c:			area3 = (h2 + h4 + h5) / (3 * initial_grid_size * initial_grid_size * pow(4,level+1));
calculate_area.c:			area4 = (h3 + h5 + h6) / (3 * initial_grid_size * initial_grid_size * pow(4,level+1));
calculate_area.c:// **5**				
calculate_area.c:	if (level < depth && test > 0.005) {
calculate_basis.c:		if ( myrank == 0 ) sync_tasks(5,2);
calculate_basis.c:		if ( myrank == 0 ) sync_tasks(5,2);
calculate_eigen.c:// // 		if ( myrank == 0 ) sync_tasks(5,2);
calculate_eigen.c:// 	double b1,b2,b3,b4,b5,b6;
calculate_eigen.c://  		b5 = sinlog_pt(k1,p2)*sinlog_pt(k2,p1)*sinlog_pt(k3,p3);
calculate_eigen.c://  		part1 = (b1+b2+b3+b4+b5+b6)*sixinv;
calculate_eigen.c:// 								points1[l][m][n] = (single(k1,k2,k3,params1)+nicola529(k1,k2,k3,params1))*equilateral(k1,k2,k3,params2)*ksum;
calculate_eigen.c:// 								points2[l][m][n] = (single(k1,k2,k3,params1)+nicola529(k1,k2,k3,params1))*(single(k1,k2,k3,params1)+nicola529(k1,k2,k3,params1))*ksum;
calculate_eigen_tri.c:	double b1,b2,b3,b4,b5,b6;
calculate_eigen_tri.c: 		b5 = sinlog_pt(k1,p1)*sinlog_pt(k2,p3)*sinlog_pt(k3,p2)*sinlog_pt(k4,p4);
calculate_eigen_tri.c: 		b5 += sinlog_pt(k1,p2)*sinlog_pt(k2,p3)*sinlog_pt(k3,p1)*sinlog_pt(k4,p4);
calculate_eigen_tri.c: 		b5 += sinlog_pt(k1,p3)*sinlog_pt(k2,p1)*sinlog_pt(k3,p2)*sinlog_pt(k4,p4);
calculate_eigen_tri.c: 		b5 += sinlog_pt(k1,p4)*sinlog_pt(k2,p3)*sinlog_pt(k3,p2)*sinlog_pt(k4,p1);
calculate_eigen_tri.c: 		part1 = (b1+b2+b3+b4+b5+b6)*sixinv;
calculate_fisher_tri.c:	double s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24;
calculate_fisher_tri.c:	s5  = Nmap[p1][q1]*Nmap[p2][q4]*Nmap[p3][q2]*Nmap[p4][q3];
calculate_fisher_tri.c:	s15 = Nmap[p1][q3]*Nmap[p2][q2]*Nmap[p3][q1]*Nmap[p4][q4];
calculate_fisher_tri.c:	sum1 =s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16+s17+s18+s19+s20+s21+s22+s23+s24;
calculate_fisher_tri.c:	result = sum1/1152.0;
calculate_fisher_tri.c:	result *= 9.0*pow(1.53E-8,6);
calculate_full.c:	double h5;
calculate_full.c:					h5 = array[i1-2*step2][j1+step2];
calculate_full.c:// 					printf("here4.5\t%d\n",m);
calculate_full.c:// 						printf("here4.5\t%d\t%e\n",m,array[r][s]);
calculate_full.c:					h5 = array[i1+2*step2][j1-step2];
calculate_full.c:// 					printf("here4.5\t%d\n",m);
calculate_full.c:					h5 = 0;
calculate_full.c:			area2 = (h2 + h3 + h5) / (3 * initial_grid_size * initial_grid_size * pow(4,*level+1));
calculate_full.c:			area3 = (h2 + h4 + h5) / (3 * initial_grid_size * initial_grid_size * pow(4,*level+1));
calculate_full.c:			area4 = (h3 + h5 + h6) / (3 * initial_grid_size * initial_grid_size * pow(4,*level+1));
calculate_full.c:// **5**				
calculate_full.c:// 	printf("here5\n");
calculate_full.c:	if (*level < depth && test > 0.005) {
calculate_gamma_3d.c:    double s1,s2,s3,s4,s5,s6,s7,s8,s9;	
calculate_gamma_3d.c:                s5 = get_beam_EE(l)/sqrt(s2*(s2*s4-s3*s3));
calculate_gamma_3d.c:                    qtilde3D_E[l][j][i] = s5*(s2*get_qtilde_E(j,l,i)-s3*get_qtilde_T(j,l,i));
calculate_gamma_3d.c:		r += 0.5 * xdiff[i] * (y[i] + y[i+1] + xdiff[i] * (deriv(xdiff,ixdiff,y,i) - deriv(xdiff,ixdiff,y,i+1)) * sixth);
calculate_gamma_3d.c:		r += (xdiff[i]) * (y[i] + y[i+1]) * 0.5;
calculate_gamma_3d.c:    double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_gamma_3d.c:    double t1,t2,t3,t4,t5,t6;
calculate_gamma_3d.c:        p5 = qtilde3D_T[l2][a2][i];
calculate_gamma_3d.c:        t1 = p1*p5*p9;
calculate_gamma_3d.c:        t4 = p3*p5*p7;
calculate_gamma_3d.c:        t5 = p2*p4*p9;
calculate_gamma_3d.c:        y[i] = x[i] * x[i] * (t1+t2+t3+t4+t5+t6) * sixth;
calculate_gamma_3d.c:    double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_gamma_3d.c:    double t1,t2,t3,t4,t5,t6;
calculate_gamma_3d.c:        p5 = qtilde3D_T[l2][a2][i];
calculate_gamma_3d.c:        t1 = p1*p5*p9;
calculate_gamma_3d.c:        t4 = p3*p5*p7;
calculate_gamma_3d.c:        t5 = p2*p4*p9;
calculate_gamma_3d.c:        yvec[i] = x[i] * x[i] * (t1+t2+t3+t4+t5+t6)/6e0;
calculate_gamma_3d.c:    double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_gamma_3d.c:    double t1,t2,t3,t4,t5,t6;
calculate_gamma_3d.c:        p5 = qtilde3D_E[l2][a2][i];
calculate_gamma_3d.c:        t1 = p1*p5*p9;
calculate_gamma_3d.c:        t4 = p3*p5*p7;
calculate_gamma_3d.c:        t5 = p2*p4*p9;
calculate_gamma_3d.c:        yvec[i] = xvec[i] * xvec[i] * (t1+t2+t3+t4+t5+t6)/6e0;
calculate_gamma_3d.c:    double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_gamma_3d.c:    double t1,t2,t3,t4,t5,t6;
calculate_gamma_3d.c:        p5 = qtilde3D_E[l2][a2][i];
calculate_gamma_3d.c:        t1 = p1*p5*p9;
calculate_gamma_3d.c:        t4 = p3*p5*p7;
calculate_gamma_3d.c:        t5 = p2*p4*p9;
calculate_gamma_3d.c:        yvec[i] = xvec[i] * xvec[i] * (t1+t2+t3+t4+t5+t6)/6e0;
calculate_gamma.c:    double s1,s2,s3,s4,s5,s6,s7,s8,s9;	
calculate_gamma.c:            s1 = pow(2e0*l+1e0,5e0/6e0);
calculate_gamma.c:                s1 = pow(2e0*l+1e0,5e0/6e0);
calculate_gamma.c:                s5 = get_beam_EE(l)/sqrt(s2*(s2*s4-s3*s3));
calculate_gamma.c:                EEweight[i] =  s1*s5;
calculate_gamma.c:    int qt1,qt2,qt3,qt4,qt5,qt6;
calculate_gamma.c:        double sum5 = Mij_T[p2][qt2][i][j];
calculate_gamma.c:        double s1  = sum1*sum5*sum9;
calculate_gamma.c:        double s5  = sum3*sum4*sum8;
calculate_gamma.c:        double s6  = sum3*sum5*sum7;
calculate_gamma.c:        double sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:    int qt1,qt2,qt3,qt4,qt5,qt6;
calculate_gamma.c:    int qe1,qe2,qe3,qe4,qe5,qe6;
calculate_gamma.c:        double sum5 = Mij_T[p2][qt2][i][j];
calculate_gamma.c:        double s1  = sum1*sum5*sum9;
calculate_gamma.c:        double s5  = sum3*sum4*sum8;
calculate_gamma.c:        double s6  = sum3*sum5*sum7;
calculate_gamma.c:        double sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:    int qt1,qt2,qt3,qt4,qt5,qt6;
calculate_gamma.c:    int qe1,qe2,qe3,qe4,qe5,qe6;
calculate_gamma.c:        double sum5 = Mij_E[p2][qe2][i][j];
calculate_gamma.c:        double s1  = sum1*sum5*sum9;
calculate_gamma.c:        double s5  = sum3*sum4*sum8;
calculate_gamma.c:        double s6  = sum3*sum5*sum7;
calculate_gamma.c:        double sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:    int qt1,qt2,qt3,qt4,qt5,qt6;
calculate_gamma.c:    int qe1,qe2,qe3,qe4,qe5,qe6;
calculate_gamma.c:        double sum5 = Mij_E[p2][qe2][i][j];
calculate_gamma.c:        double s1  = sum1*sum5*sum9;
calculate_gamma.c:        double s5  = sum3*sum4*sum8;
calculate_gamma.c:        double s6  = sum3*sum5*sum7;
calculate_gamma.c:        double sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:    int qt1,qt2,qt3,qt4,qt5,qt6;
calculate_gamma.c:    int qe1,qe2,qe3,qe4,qe5,qe6;
calculate_gamma.c:    double s1,s2,s3,s4,s5,s6;
calculate_gamma.c:        find_perm_late_TTE(m,&qt4,&qt5,&qe6);
calculate_gamma.c:        find_perm_late_TEE(m,&qt6,&qe4,&qe5);
calculate_gamma.c:        s5 = Mij_T[p2][qt1][i][j]*Mij_T[p1][qt2][i][j]*Mij_T[p3][qt3][i][j];
calculate_gamma.c:        sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:            s1 = Mij_T[p1][qt4][i][j]*Mij_T[p2][qt5][i][j]*Mij_E[p3][qe6][i][j];
calculate_gamma.c:            s2 = Mij_T[p2][qt4][i][j]*Mij_T[p3][qt5][i][j]*Mij_E[p1][qe6][i][j];
calculate_gamma.c:            s3 = Mij_T[p3][qt4][i][j]*Mij_T[p1][qt5][i][j]*Mij_E[p2][qe6][i][j];
calculate_gamma.c:            s4 = Mij_T[p3][qt4][i][j]*Mij_T[p2][qt5][i][j]*Mij_E[p1][qe6][i][j];
calculate_gamma.c:            s5 = Mij_T[p2][qt4][i][j]*Mij_T[p1][qt5][i][j]*Mij_E[p3][qe6][i][j];
calculate_gamma.c:            s6 = Mij_T[p1][qt4][i][j]*Mij_T[p3][qt5][i][j]*Mij_E[p2][qe6][i][j];
calculate_gamma.c:            sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:            s1 = Mij_T[p1][qt6][i][j]*Mij_E[p2][qe4][i][j]*Mij_E[p3][qe5][i][j];
calculate_gamma.c:            s2 = Mij_T[p2][qt6][i][j]*Mij_E[p3][qe4][i][j]*Mij_E[p1][qe5][i][j];
calculate_gamma.c:            s3 = Mij_T[p3][qt6][i][j]*Mij_E[p1][qe4][i][j]*Mij_E[p2][qe5][i][j];
calculate_gamma.c:            s4 = Mij_T[p3][qt6][i][j]*Mij_E[p2][qe4][i][j]*Mij_E[p1][qe5][i][j];
calculate_gamma.c:            s5 = Mij_T[p2][qt6][i][j]*Mij_E[p1][qe4][i][j]*Mij_E[p3][qe5][i][j];
calculate_gamma.c:            s6 = Mij_T[p1][qt6][i][j]*Mij_E[p3][qe4][i][j]*Mij_E[p2][qe5][i][j];
calculate_gamma.c:            sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:            s5 = Mij_E[p2][qe1][i][j]*Mij_E[p1][qe2][i][j]*Mij_E[p3][qe3][i][j];
calculate_gamma.c:            sum = s1+s2+s3+s4+s5+s6;
calculate_gamma.c:    double *spl[5];	 // cubic spline coefficients at each point
calculate_gamma_tri.c:	double s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24;
calculate_gamma_tri.c:		s5  = Nmap[0][0]*Nmap[1][3]*Nmap[2][1]*Nmap[3][2];
calculate_gamma_tri.c:		s15 = Nmap[0][2]*Nmap[1][1]*Nmap[2][0]*Nmap[3][3];
calculate_gamma_tri.c:		sum1 =s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16+s17+s18+s19+s20+s21+s22+s23+s24;
calculate_int.c:	if(p<1000&&l>500&&(result>1e-5||result<-1e-5))result = 0.0;
calculate_int.c:	if(p<1000&&l>500&&(result>1e-5||result<-1e-5))result = 0.0;
calculate_int.c:	double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_int.c:	double t1,t2,t3,t4,t5,t6;
calculate_int.c:			p5 = get_qtilde_T(a2,l2,i);
calculate_int.c:			t1 = p1*p5*p9;
calculate_int.c:			t4 = p3*p5*p7;
calculate_int.c:			t5 = p2*p4*p9;
calculate_int.c:			y[i] = x[i] * x[i] * (t1+t2+t3+t4+t5+t6)/6.0;
calculate_int.c:	double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_int.c:	double t1,t2,t3,t4,t5,t6;
calculate_int.c:		p5 = get_qtilde_T(a2,l2,i);
calculate_int.c:		t1 = p1*p5*p9;
calculate_int.c:		t4 = p3*p5*p7;
calculate_int.c:		t5 = p2*p4*p9;
calculate_int.c:		y[i] = x[i] * x[i] * (t1+t2+t3+t4+t5+t6)/6.0;
calculate_int.c:	double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_int.c:	double t1,t2,t3,t4,t5,t6;
calculate_int.c:		p5 = get_qtilde_E(a2,l2,i);
calculate_int.c:		t1 = p1*p5*p9;
calculate_int.c:		t4 = p3*p5*p7;
calculate_int.c:		t5 = p2*p4*p9;
calculate_int.c:		y[i] = x[i] * x[i] * (t1+t2+t3+t4+t5+t6)/6.0;
calculate_int.c:	double p1,p2,p3,p4,p5,p6,p7,p8,p9;
calculate_int.c:	double t1,t2,t3,t4,t5,t6;
calculate_int.c:		p5 = get_qtilde_E(a2,l2,i);
calculate_int.c:		t1 = p1*p5*p9;
calculate_int.c:		t4 = p3*p5*p7;
calculate_int.c:		t5 = p2*p4*p9;
calculate_int.c:		y[i] = x[i] * x[i] * (t1+t2+t3+t4+t5+t6)/6.0;
calculate_int.c:		pt2 = pow(k[i],-0.25e0);
calculate_int.c:	if(p<1000&&l>500&&(result>1e-5||result<-1e-5))result = 0.0;
calculate_int.c:		t[5] = p[0][0]*p[1][3]*p[2][2]*p[3][1];
calculate_int.c:		t[15] = p[0][2]*p[1][0]*p[2][3]*p[3][1];
calculate_ISW.c:			s1 = get_beam_TT(l)*pow(2.0*l+1.0,5.0/6.0);
calculate_ISW.c:		power[5][l] = l*(l+1.0)*get_cl_TP(l);
calculate_ISW.c:// 		printf("%d\t%e\t%e\t%e\t%e\t%e\t%e\n%",l,power[0][l],power[1][l],power[2][l],power[3][l],power[4][l],power[5][l]);
calculate_ISW.c:// 			s1 = pow(2.0*l+1.0,5.0/6.0);
calculate_ISW.c:// 					if(n==1&&(j==0||j==1500)&&r!=1)printf("%d\t%d\t%d\t%e\t%e\n",r,s,l,x,sum1);
calculate_ISW.c:		sum1 += Nmap[0][0]*Nmap[1][2]*Nmap[2][5];
calculate_ISW.c:		sum1 += Nmap[1][0]*Nmap[2][2]*Nmap[0][5];
calculate_ISW.c:		sum1 += Nmap[2][0]*Nmap[0][2]*Nmap[1][5];
calculate_ISW.c:		sum1 += Nmap[2][0]*Nmap[1][2]*Nmap[0][5];
calculate_ISW.c:		sum1 += Nmap[1][0]*Nmap[0][2]*Nmap[2][5];
calculate_ISW.c:		sum1 += Nmap[0][0]*Nmap[2][2]*Nmap[1][5];
calculate_ISW.c:		sum1 += Nmap[0][0]*Nmap[2][2]*Nmap[5][5];
calculate_ISW.c:		sum1 += Nmap[2][0]*Nmap[5][2]*Nmap[0][5];
calculate_ISW.c:		sum1 += Nmap[5][0]*Nmap[0][2]*Nmap[2][5];
calculate_ISW.c:		sum1 += Nmap[5][0]*Nmap[2][2]*Nmap[0][5];
calculate_ISW.c:		sum1 += Nmap[2][0]*Nmap[0][2]*Nmap[5][5];
calculate_ISW.c:		sum1 += Nmap[0][0]*Nmap[5][2]*Nmap[2][5];
calculate_ISW.c:		sum1 -= 2*Nmap[0][1]*Nmap[2][2]*Nmap[5][3];
calculate_ISW.c:		sum1 -= 2*Nmap[2][1]*Nmap[5][2]*Nmap[0][3];
calculate_ISW.c:		sum1 -= 2*Nmap[5][1]*Nmap[0][2]*Nmap[2][3];
calculate_ISW.c:		sum1 -= 2*Nmap[5][1]*Nmap[2][2]*Nmap[0][3];
calculate_ISW.c:		sum1 -= 2*Nmap[2][1]*Nmap[0][2]*Nmap[5][3];
calculate_ISW.c:		sum1 -= 2*Nmap[0][1]*Nmap[5][2]*Nmap[2][3];
calculate_ISW.c:		sum1 += 2*Nmap[0][0]*Nmap[2][3]*Nmap[5][4];
calculate_ISW.c:		sum1 += 2*Nmap[2][0]*Nmap[5][3]*Nmap[0][4];
calculate_ISW.c:		sum1 += 2*Nmap[5][0]*Nmap[0][3]*Nmap[2][4];
calculate_ISW.c:		sum1 += 2*Nmap[5][0]*Nmap[2][3]*Nmap[0][4];
calculate_ISW.c:		sum1 += 2*Nmap[2][0]*Nmap[0][3]*Nmap[5][4];
calculate_ISW.c:		sum1 += 2*Nmap[0][0]*Nmap[5][3]*Nmap[2][4];
calculate_ISW.c:// 	double a1 = power[0][i]*power[2][j]*power[5][k];
calculate_ISW.c:// 	double a2 = power[2][i]*power[5][j]*power[0][k];
calculate_ISW.c:// 	double a3 = power[5][i]*power[0][j]*power[2][k];
calculate_ISW.c:// 	double a4 = power[5][i]*power[2][j]*power[0][k];
calculate_ISW.c:// 	double a5 = power[2][i]*power[0][j]*power[5][k];
calculate_ISW.c:// 	double a6 = power[0][i]*power[5][j]*power[2][k];
calculate_ISW.c:// 	double p1 = a1+a2+a3+a4+a5+a6;
calculate_ISW.c:// 	double b5 = power[3][i]*power[0][j]*power[4][k];
calculate_ISW.c:// 	double p2 = b1+b2+b3+b4+b5+b6;
calculate_ISW.c:// 	double c5 = power[2][i]*power[1][j]*power[3][k];
calculate_ISW.c:// 	double p3 = c1+c2+c3+c4+c5+c6;
calculate_mode_3D.c:	double twopi = sqrt(2e0/3.1415927);
calculate_mode_3D.c:	double p1,p2,p3,p4,p5,p6,p7,p8;
calculate_mode_3D.c:	// long int size = 334831501;
calculate_mode_3D.c:	// // #pragma omp parallel for private(l1,l2,l3,bisp,L,L1,L2,L3,p1,p2,p3,p4,p5,p6,factor)
calculate_mode_3D.c:	// 	p1 = sqrt((2e0*l1+1e0)*(2e0*l2+1e0)*(2e0*l2+1e0)/4e0*3.1415927e0);
calculate_mode_3D.c:	// 	p2 = pow(-1,(L/2)%2)*twopi*pow(L+1e0,-5e-1);
calculate_mode_3D.c:	// 	p3 = pow(L+thrd,5e-1)*pow(L+sxth,-2.5e-1);
calculate_mode_3D.c:	// 	p4 = pow(L1+sxth,2.5e-1)*pow(L1+thrd,-5e-1);
calculate_mode_3D.c:	// 	p5 = pow(L2+sxth,2.5e-1)*pow(L2+thrd,-5e-1);
calculate_mode_3D.c:	// 	p6 = pow(L3+sxth,2.5e-1)*pow(L3+thrd,-5e-1);
calculate_mode_3D.c:	// 	factor = p1*p2*p3*p4*p5*p6;
calculate_mode_3D.c:			// x = get_weight(i,j,k)*plijk_TTT(5,i,j,k);
calculate_modes.c:					x1 = bispectrum[i][j][k]*1.55e-8*1.55e-8;
calculate_modes_tri.c:		if ( myrank == 0 ) sync_tasks(15,3);
calculate_norm.c:	double s1,s2,s3,s4,s5,s6;
calculate_norm.c:		s5  = Nmap[0][2]*Nmap[1][0]*Nmap[2][1];
calculate_norm.c:		sum1 = s1+s2+s3+s4+s5+s6;
calculate_norm.c:	result *= 3.0*xvec[i]*xvec[i]*pow(1.55e-8,4)/(4.0*M_PI);
calculate_PS.c:			s1 = get_beam_TT(l)*pow(2.0*l+1.0,5.0/6.0);
calculate_PS.c:			s1 = pow(2.0*l+1.0,5.0/6.0);
calculate_shape.c:#define MAX_LINE_LEN 500
calculate_shape.c:		case 5: result = ghost(k1, k2, k3, params); break;
calculate_shape.c:		case 15: result = chen(k1, k2, k3, params); break;
calculate_shape.c:		case 25: result = NBD_sinlog(k1, k2, k3, params); break;
calculate_shape.c:		case 32: result = featureENV5(k1, k2, k3, params); break;
calculate_shape.c:		case 35: result = QSF(k1, k2, k3, params); break;
calculate_shape.c:		case 45: result = ksin(k1, k2, k3, params); break;
calculate_shape.c:		case 50: result = expsin(k1, k2, k3, params); break;
calculate_shape.c:		case 51: result = expcos(k1, k2, k3, params); break;
calculate_shape.c:		case 52: result = equiexpsin(k1, k2, k3, params); break;
calculate_shape.c:		case 53: result = equiexpcos(k1, k2, k3, params); break;
calculate_shape.c:		case 54: result = flatexpsin(k1, k2, k3, params); break;
calculate_shape.c:		case 55: result = flatexpcos(k1, k2, k3, params); break;
calculate_shape.c:		case 56: result = NBD_DBI(k1, k2, k3, params); break;
calculate_shape.c:		case 57: result = cs_feature(k1, k2, k3, params); break;
calculate_shape.c:		case 5: result = ghost(k1, k2, k3, params); break;
calculate_shape.c:		case 15: result = chen(k1, k2, k3, params); break;
calculate_shape.c:		case 25: result = NBD_sinlog(k1, k2, k3, params); break;
calculate_shape.c:		case 32: result = featureENV5(k1, k2, k3, params); break;
calculate_shape.c:		case 35: result = QSF(k1, k2, k3, params); break;
calculate_shape.c:		case 45: result = ksin(k1, k2, k3, params); break;
calculate_shape.c:		case 50: result = expsin(k1, k2, k3, params); break;
calculate_shape.c:		case 51: result = expcos(k1, k2, k3, params); break;
calculate_shape.c:		case 52: result = equiexpsin(k1, k2, k3, params); break;
calculate_shape.c:		case 53: result = equiexpcos(k1, k2, k3, params); break;
calculate_shape.c:		case 54: result = flatexpsin(k1, k2, k3, params); break;
calculate_shape.c:		case 55: result = flatexpcos(k1, k2, k3, params); break;
calculate_shape.c:		case 56: result = NBD_DBI(k1, k2, k3, params); break;
calculate_shape.c:		case 57: result = cs_feature(k1, k2, k3, params); break;
calculate_shape.c:	if(k>1e-5)result = k6*shape(k, k, k, params);
calculate_shape.c:	if(scale(k, params)>1e-15)result =  p222*shape(k1, k2, k3, params)/scale(k, params);
calculate_shape.c:	if (k1t<=50.1 || k2t<=50.1 || k3t<=50.1) {
calculate_shape.c:	double p5 = 0e0;
calculate_shape.c:	if (k3>step && k2+k3>=k1+2*step) p5 = smooth1_in(k1+step,k2,k3-step,params);
calculate_shape.c:	double s5 = 0e0;
calculate_shape.c:	if (k3>2*step && (k3+k2>=k1+2*step) && (k3+k1>=k2+2*step) ) s5 = smooth1_in(k1+step,k2+step,k3-2*step,params);
calculate_shape.c:	double r5 = 0e0;
calculate_shape.c:	if (k3>2*step && k2+k3>=k1+4*step) r5 = smooth1_in(k1+2*step,k2,k3-2*step,params);
calculate_shape.c:	double result = (cn + 0.607*(p1+p2+p3+p4+p5+p6) + 0.223*(s1+s2+s3+s4+s5+s6) + 0.135*(r1+r2+r3+r4+r5+r6))/6.79;
calculate_shape.c:	double step = 0.005*kk;
calculate_shape.c:	double p5 = 0e0;
calculate_shape.c:	if (k3>step && k2+k3>=k1+2*step) p5 = smooth2_in(k1+step,k2,k3-step,params);
calculate_shape.c:	double s5 = 0e0;
calculate_shape.c:	if (k3>2*step && (k3+k2>=k1+2*step) && (k3+k1>=k2+2*step) ) s5 = smooth2_in(k1+step,k2+step,k3-2*step,params);
calculate_shape.c:	double r5 = 0e0;
calculate_shape.c:	if (k3>2*step && k2+k3>=k1+4*step) r5 = smooth2_in(k1+2*step,k2,k3-2*step,params);
calculate_shape.c:	double result = (cn + 0.607*(p1+p2+p3+p4+p5+p6) + 0.223*(s1+s2+s3+s4+s5+s6) + 0.135*(r1+r2+r3+r4+r5+r6))/6.79;
calculate_shape.c:	double step = 5;
calculate_shape.c:	double k15 = k14*k1;
calculate_shape.c:	double k25 = k24*k2;
calculate_shape.c:	double k35 = k34*k3;
calculate_shape.c:	double p5 = k15+k25+k35;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p333;
calculate_shape.c:	double result = -3.0*factor*p1inv*p1inv*(p5 + 2*d1 - 3*d2 + 2*p113 - 8*p122) / 7.0;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p333;
calculate_shape.c:	if(p111>1e-15) factor = 1/p333;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p333;
calculate_shape.c:	double result = factor*(int1*k1*k12t + int2*k2*k22t + int3*k3*k32t)/1.584319e-01;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p333;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p333;
calculate_shape.c:	if(p111>1e-15) p111inv = 1e0/p111;
calculate_shape.c:	if(p111>1e-15) p111inv = 1/p111;
calculate_shape.c:	double w5 = 0e0;
calculate_shape.c:	if(k12*k32>1e-10) w5 = 1e0/(k12*k32);
calculate_shape.c:	double result = factor*(w1*w4 + w2*w5 + w3*w6)/6e0;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p333;
calculate_shape.c:	if(p111>1e-15) factor = 1e0 / (p111*p111);
calculate_shape.c:	double s2 = 2e0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:		s2 = 2e0*3.1415927e0*params.a2*1e-2;
calculate_shape.c:		s2 = 2e0*3.1415927e0*params.a2*1e-2;
calculate_shape.c:	if(p111>1e-15) factor = (k1t*k2t*k3t)/p333;
calculate_shape.c:		s2 = 2e0*3.1415927e0*params.a2*1e-2;
calculate_shape.c:	if(p111>1e-15) factor = (1e0 - k1t*k2t*k3t/p111)/p222;
calculate_shape.c:		s2 = 2e0*3.1415927e0*params.a2*1e-2;
calculate_shape.c:	double omegaE = 35e0;
calculate_shape.c:	double omegaL = 15e0;
calculate_shape.c:	double ampliE = 525e0;
calculate_shape.c:	double phaseE = 5e-2*2e0*3.1415927;
calculate_shape.c:	double phaseF = 2.5e-1*2e0*3.1415927;
calculate_shape.c:	double phaseL = 2e-1*2e0*3.1415927;
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	s1 = (p1-0.05)*(p1-0.05)/(1.8e-3);
calculate_shape.c:	if(p111>1e-15) factor = (p12/p111)/p222;
calculate_shape.c:		s2 = 2e0*3.1415927e0*params.a2*1e-2;
calculate_shape.c:	if(p111>1e-15) factor = 1/p333;
calculate_shape.c:	kmin2 = 500.0;
calculate_shape.c:	if(kmin < 500.0){
calculate_shape.c:	if(kmin<500.0){
calculate_shape.c:		zeta = 1.0/500.0;
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double x1,x2,x3,x4,x5;
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:		x2 = pow(p111*p1/3.0,-1.5);
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	double k15 = k12*k12*k1;
calculate_shape.c:	double k25 = k22*k22*k2;
calculate_shape.c:	double k35 = k32*k32*k3;
calculate_shape.c:	double p555 = p111*p111*p111*p111*p111;
calculate_shape.c:	double d555 = 0.0;
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:		d555 = 1e0/p555;
calculate_shape.c:	double result = 9e0*d555*(k15*k12t2+k25*k22t2+k35*k32t2)/4.0 - local(k1,k2,k3,params);
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	double c1 = 2e0*3.1415927*params.a1;
calculate_shape.c:	double c2 = 2e0*3.1415927*params.a2*1e-2;
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	double c1 = 2.0*3.1415927*params.a1;
calculate_shape.c:	double c2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	double c2 = 5e-1/params.a1;
calculate_shape.c:	double c3 = 2e0*3.1415927*params.a2*1e-2;
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if(p111>1e-15) factor = 1e0 / (p111*p111);
calculate_shape.c:	double s2 = 2e0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double s2 = 2e0*3.1415927e0*params.a2*1e-2;
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	if (p111>1e-15){
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double s1 = 2.0*3.1415927*p1*params.a1;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double result = factor*exp(-(p1-4.5e-2)*(p1-4.5e-2)/(4e-3))*sin(s1+s2);
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double s1 = 2.0*3.1415927*p1*params.a1;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double result = factor*exp(-(p1-4.5e-2)*(p1-4.5e-2)/(7.11e-3))*sin(s1+s2);
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double s1 = 2.0*3.1415927*p1*params.a1;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double result = factor*exp(-(p1-4.5e-2)*(p1-4.5e-2)/(1.11e-2))*sin(s1+s2);
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double s1 = 2.0*3.1415927*p1*params.a1;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double result = factor*exp(-(p1-4.5e-2)*(p1-4.5e-2)/(1.6e-2))*sin(s1+s2);
calculate_shape.c:double featureENV5(double k1, double k2, double k3, shape_params params) {
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double s1 = 2.0*3.1415927*p1*params.a1;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double result = factor*exp(-(p1-4.5e-2)*(p1-4.5e-2)/(2.18e-2))*sin(s1+s2);
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double s1 = 2.0*3.1415927*p1*params.a1;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double result = factor*exp(-(p1-4.5e-2)*(p1-4.5e-2)/(2.84e-2))*sin(s1+s2);
calculate_shape.c:	if(p111>1e-15) factor = 1e0/p222;
calculate_shape.c:	double s1 = 2.0*3.1415927*p1*params.a1;
calculate_shape.c:	double s2 = 2.0*3.1415927*params.a2*1e-2;
calculate_shape.c:	double result = factor*exp(-(p1-4.5e-2)*(p1-4.5e-2)/(3.6e-2))*sin(s1+s2);
calculate_shape.c:double nicola529(double k1, double k2, double k3, shape_params params) {
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c://  equation 48 of 1110.3050
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	double A = 0.0509/6e0;
calculate_shape.c:	s2 = ((15e0*x*x-9e0)/(x*x*x))*sin(2e0*x);
calculate_shape.c:	s1 = -((x*x*x*x-9e0*x*x+54e0)/(x*x))*cos(x);
calculate_shape.c:	s2 = ((2e0*x*x*x*x-27e0*x*x+54e0)/(x*x*x))*sin(x);
calculate_shape.c:	double x5 = x4*x;
calculate_shape.c:	double c2 = 195971.0/2400000.0;
calculate_shape.c:	double c4 = 6457.0/19200.0;
calculate_shape.c:	double c5 = 71.0/600.0;
calculate_shape.c:	return c1*x + c2*x2 + c3*x3 - c4*x4 + c5*x5;
calculate_shape.c:	double x5 = x4*x;
calculate_shape.c:	double c3 = 4509229.0/384000.0;
calculate_shape.c:	double c5 = 216413.0/25600.0;
calculate_shape.c:	return c1*x + c2*x2 + c3*x3 - c4*x4 + c5*x5;
calculate_shape.c:	if(ksum<1.0e-5){
calculate_shape.c:		result = (0.4881*ksum + 0.01946 / (ksum)) * sqrt(kmin2/500.0);
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if(p111>1e-15) factor = 1e0 / (p111*p111);
calculate_shape.c:	if(p111>1e-15) factor = 1e0 / (p111*p111);
calculate_shape.c:	if(p111>1e-15) factor = 1e0 / (p111*p111);
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	double phase = 2.0*3.1415927e0*params.a2/1e2;
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	double p = 2.0*3.1415927e0*params.a2/1e2;
calculate_shape.c:	if(p111>1e-15){
calculate_shape.c:	if(a>1e-5){
calculate_shape.c:	if(a>1e-5){
calculate_shape.c:	if(a>1e-5){
calculate_shape.c:  aux = pow(10., log10u)/(exp(0.5)+pow(10., log10u));
calculate_shape.c:  for (j=0; j<i;j++) {printf("%d : %15.8e %15.8e\n", j, (*k)[j], (*dpp)[j]);};
calculate_shape.c:	       1.         * (-5./4.) +
calculate_shape_tri.c:	double result = pow(k1*k2*k3*k4,2.25) * shape_tri(k1, k2, k3, k4);
calculate_shape_tri.c:	if(k1*k2*k3*k4!=0) result = 1.0/pow(k1*k2*k3*k4,2.25);
calculate_shape_tri.c:	if(k1*k2*k3*k4!=0) result = 1.0/(k1*k2*k3*k4*pow(p1,5));
calculate_shape_tri.c:		result=0.25*(pref1*combi1+pref2*combi2+pref3*combi3);//we've 24 terms in this!!!
calculate_volume.c:double cell5(double a, double b, double c, double d, double e, double f, double g, double h);
calculate_volume.c:					} else if (sum==5) {
calculate_volume.c:	} else if (sum==5) {
calculate_volume.c:		volume = cell5(a,b,c,d,e,f,g,h);
calculate_volume.c:	double p1,p2,p3,p4,p5,p6;
calculate_volume.c:	if (sum==5) {
calculate_volume.c:		p5=points[1][1][1][0];
calculate_volume.c:		volume = (p1+7.0*p2+41.0*p3+191.0*p4+641.0*p5) / 40320.0;
calculate_volume.c:		p5=points[1][1][1][0];
calculate_volume.c:		volume = (55.0*p1+151.0*p2+315.0*p3+479.0*p4+575.0*p5) / 10080.0;
calculate_volume.c:		volume = (439.0*p1+531.0*p2+599.0*p3+623.0*p4) / 10080.0;
calculate_volume.c:		p5=points[1][1][0][1]+points[1][1][1][0];
calculate_volume.c:		volume = (919.0*p1 + 1069.0*p2 + 1161.0*p3 + 1219.0*p4 + 1239.0*p5 + 1253.0*p6)/20160.0;
calculate_volume.c:	} else if (sum==15) {
calculate_volume.c:		p5=points[1][1][1][0];
calculate_volume.c:		volume = (1879.0*p1+2329.0*p2+2479.0*p3+2513.0*p4+2519.0*p5) / 40320.0;
calculate_volume.c:		p5=points[1][1][1][1];
calculate_volume.c:		volume = (p1+p2+p3+p4+p5) / 16.0;
calculate_volume.c:	double result = (11*(a+b+c+e)+17*(d+g+f)+25*h)/240.0;
calculate_volume.c:	double result = (47*a+19*(b+c+e)+5*(d+f+g)+h)/720.0;
calculate_volume.c:	double result = (40*(b+c)+35*(a+d)+26*(f+g)+19*(e+h))/360.0;
calculate_volume.c:	double result = (89*a+85*(b+c+e)+71*(d+f+g)+43*h)/720.0;
calculate_volume.c:double cell5(double a, double b, double c, double d, double e, double f, double g, double h){
ckpt.c:  char suffix[5];
ckpt.c:  char suffix[5];
cubic_fit.c:				18*in[1][0][1]+36*in[1][0][2]-6*in[1][0][3]-18*in[1][1][0]-27*in[1][1][1]+54*in[1][1][2]-
cubic_fit.c:				9*in[1][1][3]+36*in[1][2][0]+54*in[1][2][1]-108*in[1][2][2]+18*in[1][2][3]-6*in[1][3][0]-
cubic_fit.c:				12*in[2][0][3]+36*in[2][1][0]+54*in[2][1][1]-108*in[2][1][2]+18*in[2][1][3]-72*in[2][2][0]-
cubic_fit.c:				9*in[1][1][3]+18*in[1][2][0]-54*in[1][2][1]+54*in[1][2][2]-18*in[1][2][3]-3*in[1][3][0]+
cubic_fit.c:				12*in[2][0][3]+18*in[2][1][0]-54*in[2][1][1]+54*in[2][1][2]-18*in[2][1][3]-36*in[2][2][0]+
cubic_fit.c:				9*in[1][0][1]+18*in[1][0][2]-3*in[1][0][3]+18*in[1][1][0]+27*in[1][1][1]-54*in[1][1][2]+
cubic_fit.c:				9*in[1][1][3]-18*in[1][2][0]-27*in[1][2][1]+54*in[1][2][2]-9*in[1][2][3]+6*in[1][3][0]+
cubic_fit.c:				6*in[2][0][3]-36*in[2][1][0]-54*in[2][1][1]+108*in[2][1][2]-18*in[2][1][3]+36*in[2][2][0]+
cubic_fit.c:				54*in[2][2][1]-108*in[2][2][2]+18*in[2][2][3]-12*in[2][3][0]-18*in[2][3][1]+36*in[2][3][2]-
cubic_fit.c:				18*in[2][1][0]+54*in[2][1][1]-54*in[2][1][2]+18*in[2][1][3]+18*in[2][2][0]-54*in[2][2][1]+
cubic_fit.c:				54*in[2][2][2]-18*in[2][2][3]-6*in[2][3][0]+18*in[2][3][1]-18*in[2][3][2]+6*in[2][3][3]-
cubic_fit.c:				36*in[1][0][2]+6*in[1][0][3]+18*in[1][1][0]+27*in[1][1][1]-54*in[1][1][2]+9*in[1][1][3]-
cubic_fit.c:				36*in[1][2][0]-54*in[1][2][1]+108*in[1][2][2]-18*in[1][2][3]+6*in[1][3][0]+9*in[1][3][1]-
cubic_fit.c:				18*in[2][1][0]-27*in[2][1][1]+54*in[2][1][2]-9*in[2][1][3]+36*in[2][2][0]+54*in[2][2][1]-
cubic_fit.c:				9*in[1][1][0]-27*in[1][1][1]+27*in[1][1][2]-9*in[1][1][3]-18*in[1][2][0]+54*in[1][2][1]-
cubic_fit.c:				54*in[1][2][2]+18*in[1][2][3]+3*in[1][3][0]-9*in[1][3][1]+9*in[1][3][2]-3*in[1][3][3]-
cubic_fit.c:				27*in[2][1][2]+9*in[2][1][3]+18*in[2][2][0]-54*in[2][2][1]+54*in[2][2][2]-18*in[2][2][3]-
cubic_fit.c:				3*in[1][0][3]-18*in[1][1][0]-27*in[1][1][1]+54*in[1][1][2]-9*in[1][1][3]+18*in[1][2][0]+
cubic_fit.c:				27*in[1][2][1]-54*in[1][2][2]+9*in[1][2][3]-6*in[1][3][0]-9*in[1][3][1]+18*in[1][3][2]-
cubic_fit.c:				27*in[2][1][1]-54*in[2][1][2]+9*in[2][1][3]-18*in[2][2][0]-27*in[2][2][1]+54*in[2][2][2]-
cubic_mpi.c:	double time1, time2, time3, time4, time5, duration;
cubic_mpi.c:	int l_max = 500;
cubic_tri_mpi.c:	double time1, time2, time3, time4, time5, duration;
cubic_tri_mpi.c:	int l_max = 500;
decompose_mpi.c:	double time1, time2, time3, time4, time5, duration;
eigenmode_mpi.c:	double time1, time2, time3, time4, time5, duration, duration1, duration2;
eigenmodetoday_mpi.c:	double time1, time2, time3, time4, time5, duration;
eigenmodetoday_mpi.c:	if(eflag_order_late==5)load_TL(l_size, l_values);
eigenmodetoday_mpi.c:				// if(i>1995)printf("ortho: %d\t%d\t%e\n",j,i,get_orthol_TTT(j,i));
eigenmodetoday_tri_mpi.c:	double time1, time2, time3, time4, time5, duration;
eigenmode_tri_mpi.c:	double time1, time2, time3, time4, time5, duration, duration1, duration2;
eigenmode_tri_mpi.c:	if (argc < 3 || argc > 5) {
eigenmode_tri_mpi.c:		if(eflag_order_prim!=5){
feature.c:#define MAX_LINE_LEN 500
feature.c:  aux = pow(10., log10u)/(exp(0.5)+pow(10., log10u));
feature.c:  for (j=0; j<i;j++) {printf("%d : %15.8e %15.8e\n", j, (*k)[j], (*dpp)[j]);};
feature.c:       1.         * (-5./4.) +
feature.c:    printf("%15.8e %15.8e %15.8e %15.8e\n", k1, k2, k3, S);
feature.c:    printf("%15.8e %15.8e %15.8e %15.8e\n", k1, k2, k3, S);
feature.c:    printf("%15.8e %15.8e %15.8e %15.8e\n", k1, k2, k3, S);
fisher_mpi.c:	double time1, time2, time3, time4, time5, duration;
fisher_mpi.c:// 	int l_size = 501;
fisher_mpi.c:	double fisher5=0;
fisher_mpi.c:	int l_max = 500;
fisher_mpi.c:// 	printf("Fisher coeffecients\n%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\n", fisher1, fisher2, fisher3, fisher4, fisher5, fisher6, fisher7, fisher8);
fisher_mpi.c:// 	gmax = 500;
fixed_data.c:		case 5:
fixed_data.c:		case 5:
fixed_data.c:		case 5:
fixed_data.c:			order_late_TTT[3][2] = pmax_late_T+5;
fixed_data.c:			pmax_late_T = pmax_late_T+5;
fixed_data.c:			order_late_TTT[2][1] = pmax_late_T+5;
fixed_data.c:			order_late_TTT[4][1] = pmax_late_T+5;
fixed_data.c:			order_late_TTT[2][2] = pmax_late_T+5;
fixed_data.c:			pmax_late_T = pmax_late_T+5;
fixed_data.c:		double* cls_data = malloc( sizeof(double)*MAXLINES*5);
fixed_data.c:		load_txt_dbl(cls_lensed_data_file, 5, cls_data, cl_len);
fixed_data.c:			if(pt>l_raw[0]-5e-1){
fixed_data.c:				if(pt>l_raw[0]-5e-1){
fixed_data.c:			if(pt>l_raw[0]-5e-1){
fixed_data.c:				if(pt>l_raw[0]-5e-1){
fixed_data.c:		if(pt>l_raw[0]-5e-1){
fixed_data.c:		if(pt>l_raw[0]-5e-1){
fixed_data.c:			if(pt>l_EE_raw[0]-5e-1){
fixed_data.c:			if(pt>l_EE_raw[0]-5e-1){
fixed_data.c:		if(pt>l_raw[0]-5e-1){
fixed_data.c:	}else if(eflag_order_prim==5){
fixed_data.c:	}else if(eflag_order_prim==5){
fixed_data.c:	}else if(eflag_order_late==5){
fixed_data.c:	 	basis_functions_fourier(basis_temp, Tsize, pmax_late_T-5, Tmin, Tmax, Tvec);
fixed_data.c:		basis_late_T[0][pmax_late_T-5] = 0.0;
fixed_data.c:			basis_late_T[i][pmax_late_T-5] = c;
fixed_data.c:	}else if(eflag_order_late==5){
fixed_data.c:// 	if(a==5)printf("test: %d\t%d\t%e\n", l,a,beta_tri[a][l][100]);
fixed_data.c:		gamma_EEE[i][j] = results[5];
fixed_data.c:		orthol_EEE[i][j] = results[5];
fixed_data.c:		lambdal_EEE[i][j] = results[5];
gamma_mpi.c:	double time1, time2, time3, time4, time5, duration;
gamma_mpi.c:			results_g[5] = 0.0;
gamma_mpi.c:					results_g[5] = gamma_EEE_temp[i][j];
gamma_tri_mpi.c:	double time1, time2, time3, time4, time5, duration;
gl_integration.c:#define PI 3.141592653589793
gl_integration.c:#define PI_HI  3.141592741012573242187
gl_integration.c:#define PI_LO -0.00000008742278000372485127293903
gl_integration.c:#define EPSILON 2.2204460492503131e-16
gl_integration.c:    double fn, fn5, nk, n5k, pn, jk, num, den, p , pp, err;
gl_integration.c:    dS = -.125/dn;
gl_integration.c:        dS *= -.5 * (k-1) / (k+1) / dn;
gl_integration.c:    double stirling[10] = {1., 1./12., 1./288., -139./51840., -571./2488320., 
gl_integration.c:                           163879./209018880., 5246819./75246796800., 
gl_integration.c:                          -534703531./902961561600., -4483131259./86684309913600., 
gl_integration.c:                           432261921612371./514904800886784000.};
gl_integration.c:    fn = 1; fn5 = 1; nk = dn; n5k = dn+.5;
gl_integration.c:        fn5 += stirling[k]/n5k;
gl_integration.c:        n5k *= dn + .5;
gl_integration.c:    C = exp(S)*sqrt(4.0/(dn+.5)/PI) * fn / fn5;  
gl_integration.c:    double besselroots[32] = {2.404825557695773,  5.520078110286311,
gl_integration.c:                              8.653727912911013, 11.791534439014280,
gl_integration.c:                             21.211636629879269, 24.352471530749284,
gl_integration.c:                             27.493479132040250, 30.634606468431990,
gl_integration.c:                             33.775820213573560, 36.917098353664045,
gl_integration.c:                             40.058425764628240, 43.199791713176737,
gl_integration.c:                             46.341188371661815, 49.482609897397822,
gl_integration.c:                             52.624051841114984, 55.765510755019974,
gl_integration.c:                             58.906983926080954, 62.048469190227159,
gl_integration.c:                             65.189964800206866, 68.331469329856787,
gl_integration.c:                             71.472981603593752, 74.614500643701817,
gl_integration.c:                             77.756025630388066, 80.897555871137627,
gl_integration.c:                             84.039090776938195, 87.180629843641128,
gl_integration.c:                             90.322172637210500, 93.463718781944763,
gl_integration.c:                             96.605267950996279, 99.746819858680624};
gl_integration.c:        /* Asymptotic approximation of roots (Tricomi, 1950) */
gl_integration.c:        if (x > 0.5) { 
gl_integration.c:                p = (k-0.25)*PI;
gl_integration.c:                num = 0.0682894897349453 + pp*(0.131420807470708 + pp*(0.0245988241803681 + pp*0.000813005721543268));
gl_integration.c:                den = p*(1.0 + pp*(1.16837242570470 + pp*(0.200991122197811 + pp*(0.00650404577261471))));
gl_integration.c:            if ( k <= 5 ) {                 /* Extreme boundary (Gatteschi, 1967) */
gl_integration.c:                p = jk/(n+.5);
gl_integration.c:                t = p + (p/tan(p)-1.)/(8.*p*(n+.5)*(n+.5));
gl_integration.c:    /* Chebyshev expansion on [0 .5] */
gl_integration.c:   0.000044175868501,   0.000007937411347,   0.000000235861687,
gl_integration.c:   0.000000026985313,   0.000000000912562,   0.000000000076891,
gl_integration.c:   0.000000000004309,   0.000000000000955};
gl_integration.c:    /* Chebyshev expansion on [0 .5] */
gl_integration.c:   double coeffs[10] = {0.000193442222401,   0.000261532806021,
gl_integration.c:  -0.000000000055637,   0.000000000043205};
gl_integration.c:    /* Chebyshev expansion on [0 .5] */
gl_integration.c:   double coeffs[10] = {-0.001043953145466,  -0.001086540642303,
gl_integration.c:   -0.000051890885109,  -0.000009762308109,  -0.000000493161531,
gl_integration.c:   -0.000000048529058,  -0.000000010061677,   0.000000002475646,
gl_integration.c:  -0.000000001750018,   0.000000000000022};
gl_integration.c:    /* Chebyshev expansion on [0 .5] */
gl_integration.c:   double coeffs[10] = {-0.219685228198227,  -0.299245558904199, 
gl_integration.c:           -0.085543519934549,  -0.006535493269862,  -0.000863987090576, 
gl_integration.c:           -0.000217345262104,   0.000045325326574,  -0.000049009331669,
gl_integration.c:           0.000000002078413,  -0.000000001050532};
gl_integration.c:    double dn = (double)n, rho = dn + .5, rho2 = dn - .5;
gl_integration.c:    gt = 0.5*(cott-tinv);
gl_integration.c:    gtdx = 0.5*(-csct*csct + tinv*tinv);
gl_integration.c:    tB0 = 0.25*gt;
gl_integration.c:    A1 = 0.125*(gtdx-gt*tinv-0.25*gt*gt);   
gl_integration.c:    /*alpha = (n + 0.5)*theta - 0.25*PI;
gl_integration.c:    *fp = C * ( 0.5*(cosA*cotT+sinA) + n*sinA) / denom;
gl_integration.c:        C *= (1.0-0.5/m)*(m-0.5)/(n+m+0.5);
gl_integration.c:        /*alpha += theta - 0.5*PI;
gl_integration.c:        dfp = C * ( (m+0.5)*(cosA*cotT+sinA) + n*sinA ) / denom;
gl_integration.c:        double k025 = (k-.25), rho = n+.5, sgn = 1.0, fact = 1.0, hi2;         
gl_integration.c:        dh = (hi*rho-k025*PI_HI) + lo*rho - k025*PI_LO;
gl_integration.c:        /* easy way: dh = (n+0.5)*theta-(k-.25)*PI; */
gl_integration.c:        for ( j = 0; j <= 5; j++ ) {
gl_integration.c:        for ( j = 0; j <= 5; j++ ) {
global.h:extern double featureENV5(double k1, double k2, double k3, shape_params params);
global.h:extern double nicola529(double k1, double k2, double k3, shape_params params);
graph_mpi.c:	double pi = 3.141592653589793;
graph_mpi.c:	double time1, time2, time3, time4, time5, duration;
graph_mpi.c:		data[5][i] = data_raw[j++];
graph_mpi.c:			results[0] = round((data[0][n] - 9.0) / 19.335);
graph_mpi.c:			results[1] = round((data[1][n] - 9.0) / 19.335);
graph_mpi.c:			results[2] = round((data[2][n] - 9.0) / 19.335);
io.c:  double d1,d2,d3,d4,d5;
io.c:    if (cptr!=NULL ) d5 = strtod( *cptr, cptr);
io.c:    values[++i] = (int)d5;
io.c:    if ( i>(5*MAXLINES-5) ) break;
io.c:  *size = i/5+1;
io.c:  double d1,d2,d3,d4,d5,d6;
io.c:    if (cptr!=NULL ) d5 = strtod( *cptr, cptr);
io.c:    values[++i] = d5;
kendrick_mpi.c:5. read in Bessel and transfer data from file
kendrick_mpi.c:	double pi = 3.141592653589793;
kendrick_mpi.c:	double time1, time2, time3, time4, time5, duration;
kendrick_mpi.c:			case 5: s1 = ghost(k1, k2, k3); break;
kendrick_mpi.c:			case 15: s1 = chen(k1, k2, k3); break;
kendrick_mpi.c:			case 5: s2 = ghost(k1, k2, k3); break;
kendrick_mpi.c:			case 15: s2 = chen(k1, k2, k3); break;
kendrick_mpi.c:	double p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13;
kendrick_mpi.c:	p5  = (2*k1+one)*(2*k2+one)*(2+k3+one);
kendrick_mpi.c:	p13 = k*p5*p6*p6*p7*p7*p8*p9*p10*p11;
ligouri_mpi.c:	double time1, time2, time3, time4, time5, duration;
ligouri_mpi.c:				source[n][m] = data[n+m*tl+2+kl+tl]*(5.0/3.0);
local_barrier.c:    _mm_delay_64(50);
modes_from_file_mpi.c:	double time1, time2, time3, time4, time5, duration;
modes_from_file_mpi.c:				if((r>1&&r<5)||(s>1&&s<5)){
modes_from_file_mpi.c:				if((r>1&&r<5)||(s>1&&s<5)){
modes_from_file_mpi.c:		if(n==5)model=14;
modes_from_file_mpi.c:		if(n==7)model=5;
mpi_comm.c:5 = eigen
mpi_comm.c:  	case 5:
mpi_comm.c:  	case 15:
nag_test.c:Vfprintf(stderr,"n is out of range: n = %5ld\n",n);
norm_mpi.c:	double time1, time2, time3, time4, time5, duration;
offload_util.h:#define MIC_NCORES 59
optimisation_mpi.c:	double time1, time2, time3, time4, time5, duration;
optimisation_mpi.c:						x2 = copysign(pow(fabs(weight[i]),0.25),weight[i]);
optimisation_mpi.c:						x3 = pow(x3,0.25);
orthogonalisation.c:	double b1,b2,b3,b4,b5,b6;
orthogonalisation.c: 		b5 = sinlog_pt(k1,p2)*sinlog_pt(k2,p1)*sinlog_pt(k3,p3);
orthogonalisation.c: 		part1 = (b1+b2+b3+b4+b5+b6)*sixinv;
orthogonalisation.c: 		b5 = sinlog_pt(k1,q2)*sinlog_pt(k2,q1)*sinlog_pt(k3,q3);
orthogonalisation.c: 		part2 = (b1+b2+b3+b4+b5+b6)*sixinv;
orthogonalisation.c:	double b1,b2,b3,b4,b5,b6;
orthogonalisation.c: 	b5 = get_basis_prim(i,p2)*get_basis_prim(j,p1)*get_basis_prim(k,p3);
orthogonalisation.c: 	double result = (b1+b2+b3+b4+b5+b6)/(6.0);
orthogonalisation_late.c:	// sleep(5);
orthogonalisation_late.c:	int Tm1,Tm2,Tm3,Tm4,Tm5,Tm6;
orthogonalisation_late.c:	int Em1,Em2,Em3,Em4,Em5,Em6;
orthogonalisation_late.c:	int Tn1,Tn2,Tn3,Tn4,Tn5,Tn6;
orthogonalisation_late.c:	int En1,En2,En3,En4,En5,En6;
orthogonalisation_late.c:	double Tsum1,Tsum2,Tsum3,Tsum4,Tsum5,Tsum6,Tsum7,Tsum8,Tsum9,Tsum10,Tsum11,Tsum12,Tsum13,Tsum14;
orthogonalisation_late.c:	double Esum1,Esum2,Esum3,Esum4,Esum5,Esum6,Esum7,Esum8,Esum9,Esum10,Esum11,Esum12,Esum13,Esum14;
orthogonalisation_late.c:	double s1,s2,s3,s4,s5,s6;
orthogonalisation_late.c:		find_perm_late_TTE(m,&Tm4,&Tm5,&Em6);
orthogonalisation_late.c:		find_perm_late_TTE(n,&Tn4,&Tn5,&En6);
orthogonalisation_late.c:		find_perm_late_TEE(m,&Tm6,&Em4,&Em5);
orthogonalisation_late.c:		find_perm_late_TEE(n,&Tn6,&En4,&En5);
orthogonalisation_late.c:		#pragma omp for private(sum,s1,s2,s3,s4,s5,s6,wgt1,wgt2)
orthogonalisation_late.c:			s5 = Mij_T[Tm2][Tn1][i]*Mij_T[Tm1][Tn2][i]*Mij_T[Tm3][Tn3][i];
orthogonalisation_late.c:			sum = s1+s2+s3+s4+s5+s6;
orthogonalisation_late.c:				s1 = Mij_T[Tm4][Tn4][i]*Mij_T[Tm5][Tn5][i]*Mij_E[Em6][En6][i];
orthogonalisation_late.c:				s2 = Mij_T[Tm5][Tn4][i]*Mij_T[Tm4][Tn5][i]*Mij_E[Em6][En6][i];
orthogonalisation_late.c:				s1 = Mij_T[Tm6][Tn6][i]*Mij_E[Em4][En4][i]*Mij_E[Em5][En5][i];
orthogonalisation_late.c:				s2 = Mij_T[Tm6][Tn6][i]*Mij_E[Em5][En4][i]*Mij_E[Em4][En5][i];
orthogonalisation_late.c:				s5 = Mij_E[Em2][En1][i]*Mij_E[Em1][En2][i]*Mij_E[Em3][En3][i];
orthogonalisation_late.c:				sum = s1+s2+s3+s4+s5+s6;
orthogonalisation_late.c:	double b1,b2,b3,b4,b5,b6;
orthogonalisation_late.c:	 	b5 = get_basis_late_T(i,p2)*get_basis_late_T(j,p1)*get_basis_late_T(k,p3);
orthogonalisation_late.c:	 	result = (b1+b2+b3+b4+b5+b6)/(6e0);
orthogonalisation_late.c:	double b1,b2,b3,b4,b5,b6;
orthogonalisation_late.c:	 	b5 = get_basis_late_E(i,p2)*get_basis_late_E(j,p1)*get_basis_late_E(k,p3);
orthogonalisation_late.c:	 	result = (b1+b2+b3+b4+b5+b6)/(6e0);
orthogonalisation_tri_late.c:	double s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24;
orthogonalisation_tri_late.c:		s5  = Nmap[0][0]*Nmap[1][3]*Nmap[2][1]*Nmap[3][2];
orthogonalisation_tri_late.c:		s15 = Nmap[0][2]*Nmap[1][1]*Nmap[2][0]*Nmap[3][3];
orthogonalisation_tri_late.c:		sum1 =s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16+s17+s18+s19+s20+s21+s22+s23+s24;
ortho_late_mpi.c:	double time1, time2, time3, time4, time5, duration;
ortho_late_mpi.c:			char suffix1[5],suffix2[5],suffix3[5],suffix4[5];
ortho_late_mpi.c:			if((r>1&&r<5)||(s>1&&s<5)){
ortho_late_mpi.c:			if((r>1&&r<5)||(s>1&&s<5)){
ortho_late_mpi.c:// 			char suffix1[5],suffix2[5],suffix3[5];
ortho_late_mpi.c:		results[5] = 0.0;
ortho_late_mpi.c:					results[5] = lambdainv[3][i][j];
ortho_late_mpi.c:					results[5] = lambda[3][i][j];
ortho_prim_mpi.c:	double time1, time2, time3, time4, time5, duration, duration1, duration2;
ortho_prim_mpi.c:// 		char filename[100] = "/home/cosmos/tmp/jf334/DX9/master_ortho_prim_5_6000.unf";
ortho_prim_mpi.c:		// char suffix1[5],suffix2[5],suffix3[5];
ortho_tri_late_mpi.c:	double time1, time2, time3, time4, time5, duration;
ortho_tri_late_mpi.c:			char suffix1[5],suffix2[5],suffix3[5];
ortho_tri_late_mpi.c:			if((r>1&&r<5)||(s>1&&s<5)){
ortho_tri_late_mpi.c:			if((r>1&&r<5)||(s>1&&s<5)){
ortho_tri_prim_mpi.c:	double time1, time2, time3, time4, time5, duration, duration1, duration2;
ortho_tri_prim_mpi.c:// 		char filename[100] = "/home/cosmos/tmp/jf334/DX9/master_ortho_prim_5_6000.unf";
parameter.c:	char suffix1[5],suffix2[5],suffix3[5],suffix4[5],suffix5[5],suffix6[5],suffix7[5];
parameter.c:	deltaphi = iniparser_getdouble(d, "model:delta_phi", 1.5714e-8);
parameter.c:	kpivot = iniparser_getdouble(d, "model:kpivot", 5e-2);
parameter.c:	suffix5[0] = '\0';
parameter.c:	sprintf(suffix5, "%d", eflag_order_late);
parameter.c:		strcat(modes_TTT_data_file, suffix5);
parameter.c:		strcat(modes_TTE_data_file, suffix5);
parameter.c:		strcat(modes_TEE_data_file, suffix5);
parameter.c:		strcat(modes_EEE_data_file, suffix5);
parameter.c:		strcat(modes_tri_data_file, suffix5);
parameter.c:		strcat(orthol_TTT_data_file, suffix5);
parameter.c:		strcat(orthol_TTE_data_file, suffix5);
parameter.c:		strcat(orthol_TEE_data_file, suffix5);
parameter.c:		strcat(orthol_EEE_data_file, suffix5);
parameter.c:		strcat(orthol_tri_data_file, suffix5);
parameter.c:		strcat(lambdal_TTT_data_file, suffix5);
parameter.c:		strcat(lambdal_TTE_data_file, suffix5);
parameter.c:		strcat(lambdal_TEE_data_file, suffix5);
parameter.c:		strcat(lambdal_EEE_data_file, suffix5);
parameter.c:		strcat(lambdal_tri_data_file, suffix5);
parameter.c:		strcat(gamma_TTT_data_file, suffix5);
parameter.c:		strcat(gamma_TTE_data_file, suffix5);
parameter.c:		strcat(gamma_TEE_data_file, suffix5);
parameter.c:		strcat(gamma_EEE_data_file, suffix5);
parameter.c:		strcat(gamma_tri_data_file, suffix5);
parameter.c:	tri_accuracy = iniparser_getdouble(d, "bispectrum:tri_accuracy", 5e-2);
parameter.c:	l_flat = iniparser_getint(d, "bispectrum:l_flat", 150);
powerspectrum_mpi.c:	double pi = 3.141592653589793;
powerspectrum_mpi.c:	double time1, time2, time3, time4, time5, duration;
powerspectrum_mpi.c:	double x1,x2,x3,x4,x5,x6;
powerspectrum_mpi.c:// 		result = M_2_PI * 1.55e-8* 1.11 * gsl_spline_eval_integ(spl,kmin,kmax,acc);
primordial_mpi.c:5. read in Bessel and transfer data from file
primordial_mpi.c:	double pi = 3.141592653589793;
primordial_mpi.c:	double time1, time2, time3, time4, time5, duration;
primordial_mpi.c:	if(argc>5){
primordial_mpi.c:		params.a3 = atof(argv[5]);
primordial_mpi.c:		x1 = 1.5*(double)i/(size-1);
primordial_mpi.c:			x1 = 1.5*(double)i/(size-1);
primordial_mpi.c:				x2 = 1.5*(double)j/(size-1);
primordial_mpi.c:// 		printf("%d\t%e\n",i,norm[i]*5.0);
primordial_mpi.c:// 			printf("%e\t",1.5*(double)nu_index/(size-1));
primordial_mpi.c:			sim[i] = fnl_input*CV[nu_index][i] + 5.0*get_rng_gauss();
primordial_mpi.c:	height = slice(200, 300, 250);
primordial_mpi.c:	size = 151;
primordial_mpi.c:		x1 = 1.5*(double)i/(size-1);
primordial_mpi.c:// 			x1 = 1.5*(double)i/(size-1);
primordial_mpi.c:// 				x2 = 1.5*(double)j/(size-1);
primordial_mpi.c:	int size2 = 5;
primordial_mpi.c:// 			printf("%e\t",1.5*(double)nu_index/(size-1));
primordial_mpi.c:// // 			sim[i] = (4.79e0/norm[150])*CV[150][i] + sqrt(6e0*0.72)*get_rng_gauss();
primordial_mpi.c:// 			sim[i] = (4.79e0/norm[150])*CV[150][i] + sqrt(6e0*0.72)*get_rng_gauss()/enorm;
primordial_mpi.c:// // 			if(i==150)printf("%e\n",y);
primordial_mpi.c:// 			k1 = get_kmax()*i/150e0;
primordial_mpi.c:// 		char filename[200] = "/home/cosmos/ccc-cam/jf334/Cosmos2/MapsDX9/beta_DDX9_1500_7_601_smica_1e4.txt";
primordial_mpi.c:// 		char filename2[200] = "/home/cosmos/ccc-cam/jf334/Matlab/Data/beta_prim_1500_7_601_smica_1e4.txt";
primordial_mpi.c:// 				a=-0.5+i*step;
process.c:	double time1, time2, time3, time4, time5, duration;
process.c:	long int size = 334831501;
process.c:	double twopi = sqrt(2e0/3.1415927);
process.c:	double p1,p2,p3,p4,p5,p6,p7,p8;
process.c:	// #pragma omp parallel for private(l1,l2,l3,bisp,L,L1,L2,L3,p1,p2,p3,p4,p5,p6,factor)
process.c:		p1 = sqrt((2e0*l1+1e0)*(2e0*l2+1e0)*(2e0*l2+1e0)/4e0*3.1415927e0);
process.c:		p2 = pow(-1,(L/2)%2)*twopi*pow(L+1e0,-5e-1);
process.c:		p3 = pow(L+thrd,5e-1)*pow(L+sxth,-2.5e-1);
process.c:		p4 = pow(L1+sxth,2.5e-1)*pow(L1+thrd,-5e-1);
process.c:		p5 = pow(L2+sxth,2.5e-1)*pow(L2+thrd,-5e-1);
process.c:		p6 = pow(L3+sxth,2.5e-1)*pow(L3+thrd,-5e-1);
process.c:		// factor = sqrt((2e0*l1+1e0)*(2e0*l2+1e0)*(2e0*l2+1e0)/4e0*3.1415927e0)*wig3jj(2*l1, 2*l2, 2*l3, 0, 0, 0);
process.c:		factor = p1*p2*p3*p4*p5*p6;
process.c:		y1 = (x1*x1 - 5.5e-1) / (l2*(l2+1e0)*l3*(l3+1e0));
process.c:		y2 = (x2*x2 - 5.5e-1) / (l1*(l1+1e0)*l3*(l3+1e0));
process.c:		y3 = (x3*x3 - 5.5e-1) / (l2*(l2+1e0)*l1*(l1+1e0));
process.c:	    }else if (l1 < 150){
process.c:	    }else if (l2 < 150){
process.c:	    }else if (l3 < 150){
process.c:		// if(i<20)printf("%d\t%d\t%d\t%e\t%e\t%e\t%e\t%e\t%e\n",l1,l2,l3,p2,p3,p4,p5,p6,p2*p3*p4*p5*p6);
process.c:	// 	factor = sqrt((2e0*l1+1e0)*(2e0*l2+1e0)*(2e0*l2+1e0)/4e0*3.1415927e0)*wig3jj(2*l1, 2*l2, 2*l3, 0, 0, 0);
process.c:	// printf("Wigner test (-0.0214552): \t%e\n",x);
process.c:	//     factor = sqrt((2e0*l1+1e0)*(2e0*l2+1e0)*(2e0*l2+1e0)/4e0*3.1415927e0)*wig3jj(2*l1, 2*l2, 2*l3, 0, 0, 0);
projecteigen_mpi.c:	double time1, time2, time3, time4, time5, duration, duration1, duration2;
projecteigen_mpi.c:			results_m =  (double *)malloc( sizeof(double)*5);
projecteigen_mpi.c:		double x,x1,x2,x3,x4,x5,x6;
projecteigen_mpi.c:		// 	x5 = QTT[j][2]*QTT[i][2]*QTT[k][2];
projecteigen_mpi.c:		// 	x += get_modes_TTT(n)*(x1+x2+x3+x4+x5+x6)/6e0;
projecteigen_mpi.c:		// 	printf("%d\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\n",n,x1,x2,x3,x4,x5,x6,get_modes_TTT(n),x);
projecteigen_mpi.c:							x5 = QTT[j][l1]*QTT[i][l2]*QTT[k][l3];
projecteigen_mpi.c:							x += get_modes_TTT(n)*(x1+x2+x3+x4+x5+x6)/6e0;
projecteigen_mpi.c~:	double time1, time2, time3, time4, time5, duration, duration1, duration2;
projecteigen_mpi.c~:			results_m =  (double *)malloc( sizeof(double)*5);
projecteigen_mpi.c~:		double x,x1,x2,x3,x4,x5,x6;
projecteigen_mpi.c~:		// 	x5 = QTT[j][2]*QTT[i][2]*QTT[k][2];
projecteigen_mpi.c~:		// 	x += get_modes_TTT(n)*(x1+x2+x3+x4+x5+x6)/6e0;
projecteigen_mpi.c~:		// 	printf("%d\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\n",n,x1,x2,x3,x4,x5,x6,get_modes_TTT(n),x);
projecteigen_mpi.c~:							x5 = QTT[j][l1]*QTT[i][l2]*QTT[k][l3];
projecteigen_mpi.c~:							x += get_modes_TTT(n)*(x1+x2+x3+x4+x5+x6)/6e0;
spherical_bessel.c:#define gamma_one 2.6789385347
spherical_bessel.c:#define gamma_two 1.3541179394 
spherical_bessel.c:  double  nu = l + 0.5;
spherical_bessel.c:  double  mu = pow(l,0.325);
spherical_bessel.c:    double  z5 = z3*z2;
spherical_bessel.c:      value = (15.0*z4 - 6.0*z2)*sin_z - (15.0*z3  - z1)*cos_z;
spherical_bessel.c:      value = (105.0*z5 - 45.0*z3 + z1)*sin_z - (105.0*z4 - 10.0*z2)*cos_z;
spherical_bessel.c:    case 5:
spherical_bessel.c:      value = (945.0*z6 - 420.0*z4 + 15.0*z2)*sin_z - (945.0*z5 - 105.0*z3 + z1)*cos_z;
spherical_bessel.c:    double sum3 = 16.0-1512.0*sech2-3654.0*sech4-375.0*sech6;
spherical_bessel.c:    exp_term = exp_term - sum3*coth3*coth6/(5760.0*nu3);
spherical_bessel.c:    double sum3 = 16.0-1512.0*sech2-3654.0*sech4-375.0*sech6;
spherical_bessel.c:    trig_arg = trig_arg - sum3*coth3*coth6/(5760.0*nu3);
spherical_bessel.c:    double sum1 = (beta2/6.0 - 1.0/15.0)*beta;
spherical_bessel.c:    double sum4 = (beta6/5040.0 - beta4/900.0 + 19.0*beta2/12600.0 - 13.0/31500.0)*beta;
spherical_bessel.c:    double sum5 = (beta4*beta4/362880.0 - beta6/30240.0 + 71.0*beta4/604800.0 - 121.0*beta2/907200.0 + 7939.0/232848000.0)*beta;
spherical_bessel.c:    deriv = deriv - 28.0*sum5*sz3*sech*gamma_one/27.0;
split_mpi.c:	double pi = 3.141592653589793;
split_mpi.c:	double time1, time2, time3, time4, time5, duration;
split_mpi.c:	double step2 = 50.0;
split_mpi.c:	double step0 = 5.0;
split_mpi.c:// 	double step1 = 15.0;
split_mpi.c:	double cut4 = 15000.0;
split_mpi.c:// 		ltriples[i][5] = i;
split_mpi.c:	double x1,x2,x3,x4,x5;
split_mpi.c:	kstar = 0.015;
split_mpi.c:	model = 5;
split_mpi.c:	for(i=0;i<size;i++)modearray[i][5] = get_eigen(i);
split_mpi.c:	for(i=0;i<size;i++)modearray[i][15] = get_eigen(i);
split_mpi.c:	model = 25;
split_mpi.c:// 		r3 = ltriples[n][5];
split_mpi.c~:	double pi = 3.141592653589793;
split_mpi.c~:	double time1, time2, time3, time4, time5, duration;
split_mpi.c~:	double step2 = 50.0;
split_mpi.c~:	double step0 = 5.0;
split_mpi.c~:// 	double step1 = 15.0;
split_mpi.c~:	double cut4 = 15000.0;
split_mpi.c~:// 		ltriples[i][5] = i;
split_mpi.c~:	double x1,x2,x3,x4,x5;
split_mpi.c~:	kstar = 0.015;
split_mpi.c~:	model = 5;
split_mpi.c~:	for(i=0;i<size;i++)modearray[i][5] = get_eigen(i);
split_mpi.c~:	for(i=0;i<size;i++)modearray[i][15] = get_eigen(i);
split_mpi.c~:	model = 25;
split_mpi.c~:// 		r3 = ltriples[n][5];
split_tri_mpi.c:	double pi = 3.141592653589793;
split_tri_mpi.c:	double time1, time2, time3, time4, time5, duration;
split_tri_mpi.c:	double step2 = 50.0;
split_tri_mpi.c:	double step0 = 5.0;
split_tri_mpi.c:// 	double step1 = 15.0;
split_tri_mpi.c:	double cut4 = 15000.0;
string_mpi.c:	double time1, time2, time3, time4, time5, duration;
tables_mpi.c:	double time1, time2, time3, time4, time5, duration;
tables_mpi.c:	int* lvalues = malloc( sizeof(int)*5000);
tables_mpi.c:	double step = 2e-5;
tables_mpi.c:			srck[j] = 5.0*s_data[i][j]/3.0;
tables_mpi.c:	step = 2e-5*tau0;
tables_mpi.c:// 					if(k_vec[i]>0.5*l/tau0){
tables_mpi.c:		char suffix[5];
